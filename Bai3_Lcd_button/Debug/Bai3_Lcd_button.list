
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f90  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072b8  080072b8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072c0  080072c0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c0  080072c0  000172c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080072c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000154  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbb4  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f4  00000000  00000000  0002fbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d78  00000000  00000000  000334c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000224bc  00000000  00000000  00034238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001195f  00000000  00000000  000566f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccc86  00000000  00000000  00068053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134cd9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c34  00000000  00000000  00134d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004310 	.word	0x08004310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004310 	.word	0x08004310

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <button_init>:
/**
  * @brief  Init matrix button
  * @param  None
  * @retval None
  */
void button_init(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2108      	movs	r1, #8
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <button_init+0x14>)
 80004d6:	f001 ff33 	bl	8002340 <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020c00 	.word	0x40020c00

080004e4 <button_Scan>:
  * @brief  Scan matrix button
  * @param  None
  * @note  	Call every 50ms
  * @retval None
  */
void button_Scan(){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2108      	movs	r1, #8
 80004ee:	482f      	ldr	r0, [pc, #188]	; (80005ac <button_Scan+0xc8>)
 80004f0:	f001 ff26 	bl	8002340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2108      	movs	r1, #8
 80004f8:	482c      	ldr	r0, [pc, #176]	; (80005ac <button_Scan+0xc8>)
 80004fa:	f001 ff21 	bl	8002340 <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004fe:	230a      	movs	r3, #10
 8000500:	2202      	movs	r2, #2
 8000502:	492b      	ldr	r1, [pc, #172]	; (80005b0 <button_Scan+0xcc>)
 8000504:	482b      	ldr	r0, [pc, #172]	; (80005b4 <button_Scan+0xd0>)
 8000506:	f002 fd5e 	bl	8002fc6 <HAL_SPI_Receive>
	  int button_index = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 800050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000512:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000514:	2300      	movs	r3, #0
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	e03f      	b.n	800059a <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	db06      	blt.n	800052e <button_Scan+0x4a>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dc03      	bgt.n	800052e <button_Scan+0x4a>
			  button_index = i + 4;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	3304      	adds	r3, #4
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e018      	b.n	8000560 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b03      	cmp	r3, #3
 8000532:	dd07      	ble.n	8000544 <button_Scan+0x60>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b07      	cmp	r3, #7
 8000538:	dc04      	bgt.n	8000544 <button_Scan+0x60>
			  button_index = 7 - i;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f1c3 0307 	rsb	r3, r3, #7
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00d      	b.n	8000560 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2b07      	cmp	r3, #7
 8000548:	dd06      	ble.n	8000558 <button_Scan+0x74>
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0b      	cmp	r3, #11
 800054e:	dc03      	bgt.n	8000558 <button_Scan+0x74>
			  button_index = i + 4;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3304      	adds	r3, #4
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e003      	b.n	8000560 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f1c3 0317 	rsb	r3, r3, #23
 800055e:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 8000560:	4b13      	ldr	r3, [pc, #76]	; (80005b0 <button_Scan+0xcc>)
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	897b      	ldrh	r3, [r7, #10]
 8000566:	4013      	ands	r3, r2
 8000568:	b29b      	uxth	r3, r3
 800056a:	2b00      	cmp	r3, #0
 800056c:	d005      	beq.n	800057a <button_Scan+0x96>
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <button_Scan+0xd4>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2100      	movs	r1, #0
 8000574:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000578:	e009      	b.n	800058e <button_Scan+0xaa>
		  else button_count[button_index]++;
 800057a:	4a0f      	ldr	r2, [pc, #60]	; (80005b8 <button_Scan+0xd4>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000582:	3301      	adds	r3, #1
 8000584:	b299      	uxth	r1, r3
 8000586:	4a0c      	ldr	r2, [pc, #48]	; (80005b8 <button_Scan+0xd4>)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  mask = mask >> 1;
 800058e:	897b      	ldrh	r3, [r7, #10]
 8000590:	085b      	lsrs	r3, r3, #1
 8000592:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b0f      	cmp	r3, #15
 800059e:	ddbc      	ble.n	800051a <button_Scan+0x36>
	  }
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40020c00 	.word	0x40020c00
 80005b0:	20000054 	.word	0x20000054
 80005b4:	200000c8 	.word	0x200000c8
 80005b8:	20000034 	.word	0x20000034

080005bc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08e      	sub	sp, #56	; 0x38
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]
 80005d2:	615a      	str	r2, [r3, #20]
 80005d4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]
 80005e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80005e8:	4b2f      	ldr	r3, [pc, #188]	; (80006a8 <MX_FSMC_Init+0xec>)
 80005ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80005ee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80005f0:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_FSMC_Init+0xec>)
 80005f2:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <MX_FSMC_Init+0xf0>)
 80005f4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80005f6:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <MX_FSMC_Init+0xec>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_FSMC_Init+0xec>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000602:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_FSMC_Init+0xec>)
 800060a:	2210      	movs	r2, #16
 800060c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800061a:	4b23      	ldr	r3, [pc, #140]	; (80006a8 <MX_FSMC_Init+0xec>)
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000628:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_FSMC_Init+0xec>)
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000644:	2200      	movs	r2, #0
 8000646:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <MX_FSMC_Init+0xec>)
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800064e:	230f      	movs	r3, #15
 8000650:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000652:	230f      	movs	r3, #15
 8000654:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8000656:	233c      	movs	r3, #60	; 0x3c
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800065e:	2310      	movs	r3, #16
 8000660:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000662:	2311      	movs	r3, #17
 8000664:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000666:	2300      	movs	r3, #0
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800066a:	2308      	movs	r3, #8
 800066c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800066e:	230f      	movs	r3, #15
 8000670:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8000672:	2309      	movs	r3, #9
 8000674:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800067a:	2310      	movs	r3, #16
 800067c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800067e:	2311      	movs	r3, #17
 8000680:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000686:	463a      	mov	r2, r7
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_FSMC_Init+0xec>)
 8000690:	f003 f87c 	bl	800378c <HAL_SRAM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800069a:	f001 f92f 	bl	80018fc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800069e:	bf00      	nop
 80006a0:	3738      	adds	r7, #56	; 0x38
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000058 	.word	0x20000058
 80006ac:	a0000104 	.word	0xa0000104

080006b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <HAL_FSMC_MspInit+0x88>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d131      	bne.n	8000730 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <HAL_FSMC_MspInit+0x88>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <HAL_FSMC_MspInit+0x8c>)
 80006d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006da:	4a18      	ldr	r2, [pc, #96]	; (800073c <HAL_FSMC_MspInit+0x8c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <HAL_FSMC_MspInit+0x8c>)
 80006e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80006ee:	f64f 7388 	movw	r3, #65416	; 0xff88
 80006f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000700:	230c      	movs	r3, #12
 8000702:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <HAL_FSMC_MspInit+0x90>)
 800070a:	f001 fc7d 	bl	8002008 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800070e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000712:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000714:	2302      	movs	r3, #2
 8000716:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071c:	2303      	movs	r3, #3
 800071e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000720:	230c      	movs	r3, #12
 8000722:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4619      	mov	r1, r3
 8000728:	4806      	ldr	r0, [pc, #24]	; (8000744 <HAL_FSMC_MspInit+0x94>)
 800072a:	f001 fc6d 	bl	8002008 <HAL_GPIO_Init>
 800072e:	e000      	b.n	8000732 <HAL_FSMC_MspInit+0x82>
    return;
 8000730:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000732:	3718      	adds	r7, #24
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200000a8 	.word	0x200000a8
 800073c:	40023800 	.word	0x40023800
 8000740:	40021000 	.word	0x40021000
 8000744:	40020c00 	.word	0x40020c00

08000748 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000750:	f7ff ffae 	bl	80006b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b6f      	ldr	r3, [pc, #444]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a6e      	ldr	r2, [pc, #440]	; (8000934 <MX_GPIO_Init+0x1d8>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6c      	ldr	r3, [pc, #432]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b68      	ldr	r3, [pc, #416]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a67      	ldr	r2, [pc, #412]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b65      	ldr	r3, [pc, #404]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b61      	ldr	r3, [pc, #388]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a60      	ldr	r2, [pc, #384]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b5e      	ldr	r3, [pc, #376]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b5a      	ldr	r3, [pc, #360]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a59      	ldr	r2, [pc, #356]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b53      	ldr	r3, [pc, #332]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a52      	ldr	r2, [pc, #328]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007ec:	f043 0308 	orr.w	r3, r3, #8
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b50      	ldr	r3, [pc, #320]	; (8000934 <MX_GPIO_Init+0x1d8>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0308 	and.w	r3, r3, #8
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4b      	ldr	r2, [pc, #300]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a44      	ldr	r2, [pc, #272]	; (8000934 <MX_GPIO_Init+0x1d8>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b42      	ldr	r3, [pc, #264]	; (8000934 <MX_GPIO_Init+0x1d8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2170      	movs	r1, #112	; 0x70
 800083a:	483f      	ldr	r0, [pc, #252]	; (8000938 <MX_GPIO_Init+0x1dc>)
 800083c:	f001 fd80 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000846:	483d      	ldr	r0, [pc, #244]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000848:	f001 fd7a 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2140      	movs	r1, #64	; 0x40
 8000850:	483b      	ldr	r0, [pc, #236]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000852:	f001 fd75 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085c:	4839      	ldr	r0, [pc, #228]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800085e:	f001 fd6f 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	4838      	ldr	r0, [pc, #224]	; (8000948 <MX_GPIO_Init+0x1ec>)
 8000868:	f001 fd6a 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800086c:	2370      	movs	r3, #112	; 0x70
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	482d      	ldr	r0, [pc, #180]	; (8000938 <MX_GPIO_Init+0x1dc>)
 8000884:	f001 fbc0 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4826      	ldr	r0, [pc, #152]	; (800093c <MX_GPIO_Init+0x1e0>)
 80008a2:	f001 fbb1 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80008a6:	23c0      	movs	r3, #192	; 0xc0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x1e8>)
 80008ba:	f001 fba5 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 80008be:	2330      	movs	r3, #48	; 0x30
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	481a      	ldr	r0, [pc, #104]	; (800093c <MX_GPIO_Init+0x1e0>)
 80008d2:	f001 fb99 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <MX_GPIO_Init+0x1e4>)
 80008ee:	f001 fb8b 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80008f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800090c:	f001 fb7c 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000910:	2308      	movs	r3, #8
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <MX_GPIO_Init+0x1ec>)
 8000928:	f001 fb6e 	bl	8002008 <HAL_GPIO_Init>

}
 800092c:	bf00      	nop
 800092e:	3730      	adds	r7, #48	; 0x30
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	40021000 	.word	0x40021000
 800093c:	40020800 	.word	0x40020800
 8000940:	40021800 	.word	0x40021800
 8000944:	40020000 	.word	0x40020000
 8000948:	40020c00 	.word	0x40020c00

0800094c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000956:	4a04      	ldr	r2, [pc, #16]	; (8000968 <LCD_WR_REG+0x1c>)
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	8013      	strh	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	600ffffe 	.word	0x600ffffe

0800096c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <LCD_WR_DATA+0x1c>)
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	8053      	strh	r3, [r2, #2]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	600ffffe 	.word	0x600ffffe

0800098c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <LCD_RD_DATA+0x20>)
 8000994:	885b      	ldrh	r3, [r3, #2]
 8000996:	b29b      	uxth	r3, r3
 8000998:	80fb      	strh	r3, [r7, #6]
	return ram;
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	b29b      	uxth	r3, r3
}
 800099e:	4618      	mov	r0, r3
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	600ffffe 	.word	0x600ffffe

080009b0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4604      	mov	r4, r0
 80009b8:	4608      	mov	r0, r1
 80009ba:	4611      	mov	r1, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4623      	mov	r3, r4
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	4603      	mov	r3, r0
 80009c4:	80bb      	strh	r3, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	807b      	strh	r3, [r7, #2]
 80009ca:	4613      	mov	r3, r2
 80009cc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 80009ce:	202a      	movs	r0, #42	; 0x2a
 80009d0:	f7ff ffbc 	bl	800094c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	0a1b      	lsrs	r3, r3, #8
 80009d8:	b29b      	uxth	r3, r3
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ffc6 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80009e0:	88fb      	ldrh	r3, [r7, #6]
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ffc0 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	0a1b      	lsrs	r3, r3, #8
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff ffba 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80009f8:	887b      	ldrh	r3, [r7, #2]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ffb4 	bl	800096c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000a04:	202b      	movs	r0, #43	; 0x2b
 8000a06:	f7ff ffa1 	bl	800094c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000a0a:	88bb      	ldrh	r3, [r7, #4]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ffab 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000a16:	88bb      	ldrh	r3, [r7, #4]
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ffa5 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000a22:	883b      	ldrh	r3, [r7, #0]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff9f 	bl	800096c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000a2e:	883b      	ldrh	r3, [r7, #0]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff ff99 	bl	800096c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000a3a:	202c      	movs	r0, #44	; 0x2c
 8000a3c:	f7ff ff86 	bl	800094c <LCD_WR_REG>
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd90      	pop	{r4, r7, pc}

08000a48 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <lcd_Clear+0x60>)
 8000a54:	881b      	ldrh	r3, [r3, #0]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <lcd_Clear+0x60>)
 8000a5c:	885b      	ldrh	r3, [r3, #2]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	2100      	movs	r1, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ffa3 	bl	80009b0 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	81fb      	strh	r3, [r7, #14]
 8000a6e:	e011      	b.n	8000a94 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8000a70:	2300      	movs	r3, #0
 8000a72:	81bb      	strh	r3, [r7, #12]
 8000a74:	e006      	b.n	8000a84 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8000a76:	88fb      	ldrh	r3, [r7, #6]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff ff77 	bl	800096c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000a7e:	89bb      	ldrh	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	81bb      	strh	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <lcd_Clear+0x60>)
 8000a86:	885b      	ldrh	r3, [r3, #2]
 8000a88:	89ba      	ldrh	r2, [r7, #12]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d3f3      	bcc.n	8000a76 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	81fb      	strh	r3, [r7, #14]
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <lcd_Clear+0x60>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d3e8      	bcc.n	8000a70 <lcd_Clear+0x28>
		}
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200000ac 	.word	0x200000ac

08000aac <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	80bb      	strh	r3, [r7, #4]
 8000aba:	4613      	mov	r3, r2
 8000abc:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000abe:	88bb      	ldrh	r3, [r7, #4]
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	88b9      	ldrh	r1, [r7, #4]
 8000ac4:	88f8      	ldrh	r0, [r7, #6]
 8000ac6:	f7ff ff73 	bl	80009b0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff ff4d 	bl	800096c <LCD_WR_DATA>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4623      	mov	r3, r4
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	4603      	mov	r3, r0
 8000af0:	80bb      	strh	r3, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	70fb      	strb	r3, [r7, #3]
 8000af6:	4613      	mov	r3, r2
 8000af8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000afe:	88fb      	ldrh	r3, [r7, #6]
 8000b00:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000b02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b06:	085b      	lsrs	r3, r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	4413      	add	r3, r2
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	fb12 f303 	smulbb	r3, r2, r3
 8000b32:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	3b20      	subs	r3, #32
 8000b38:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	b29a      	uxth	r2, r3
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4413      	add	r3, r2
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b29c      	uxth	r4, r3
 8000b48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	88bb      	ldrh	r3, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	88b9      	ldrh	r1, [r7, #4]
 8000b5a:	88f8      	ldrh	r0, [r7, #6]
 8000b5c:	4622      	mov	r2, r4
 8000b5e:	f7ff ff27 	bl	80009b0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000b62:	2300      	movs	r3, #0
 8000b64:	827b      	strh	r3, [r7, #18]
 8000b66:	e07a      	b.n	8000c5e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000b68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b6c:	2b0c      	cmp	r3, #12
 8000b6e:	d028      	beq.n	8000bc2 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000b70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b74:	2b10      	cmp	r3, #16
 8000b76:	d108      	bne.n	8000b8a <lcd_ShowChar+0xae>
 8000b78:	78fa      	ldrb	r2, [r7, #3]
 8000b7a:	8a7b      	ldrh	r3, [r7, #18]
 8000b7c:	493c      	ldr	r1, [pc, #240]	; (8000c70 <lcd_ShowChar+0x194>)
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	440a      	add	r2, r1
 8000b82:	4413      	add	r3, r2
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	75fb      	strb	r3, [r7, #23]
 8000b88:	e01b      	b.n	8000bc2 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000b8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b8e:	2b18      	cmp	r3, #24
 8000b90:	d10b      	bne.n	8000baa <lcd_ShowChar+0xce>
 8000b92:	78fa      	ldrb	r2, [r7, #3]
 8000b94:	8a79      	ldrh	r1, [r7, #18]
 8000b96:	4837      	ldr	r0, [pc, #220]	; (8000c74 <lcd_ShowChar+0x198>)
 8000b98:	4613      	mov	r3, r2
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	4413      	add	r3, r2
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	4403      	add	r3, r0
 8000ba2:	440b      	add	r3, r1
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	75fb      	strb	r3, [r7, #23]
 8000ba8:	e00b      	b.n	8000bc2 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000baa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bae:	2b20      	cmp	r3, #32
 8000bb0:	d15a      	bne.n	8000c68 <lcd_ShowChar+0x18c>
 8000bb2:	78fa      	ldrb	r2, [r7, #3]
 8000bb4:	8a7b      	ldrh	r3, [r7, #18]
 8000bb6:	4930      	ldr	r1, [pc, #192]	; (8000c78 <lcd_ShowChar+0x19c>)
 8000bb8:	0192      	lsls	r2, r2, #6
 8000bba:	440a      	add	r2, r1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	75bb      	strb	r3, [r7, #22]
 8000bc6:	e044      	b.n	8000c52 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000bc8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d120      	bne.n	8000c12 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000bd0:	7dfa      	ldrb	r2, [r7, #23]
 8000bd2:	7dbb      	ldrb	r3, [r7, #22]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d004      	beq.n	8000bea <lcd_ShowChar+0x10e>
 8000be0:	883b      	ldrh	r3, [r7, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fec2 	bl	800096c <LCD_WR_DATA>
 8000be8:	e003      	b.n	8000bf2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000bea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff febd 	bl	800096c <LCD_WR_DATA>
				m++;
 8000bf2:	7d7b      	ldrb	r3, [r7, #21]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000bf8:	7d7b      	ldrb	r3, [r7, #21]
 8000bfa:	7bfa      	ldrb	r2, [r7, #15]
 8000bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c00:	fb01 f202 	mul.w	r2, r1, r2
 8000c04:	1a9b      	subs	r3, r3, r2
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d11f      	bne.n	8000c4c <lcd_ShowChar+0x170>
				{
					m=0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	757b      	strb	r3, [r7, #21]
					break;
 8000c10:	e022      	b.n	8000c58 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000c12:	7dfa      	ldrb	r2, [r7, #23]
 8000c14:	7dbb      	ldrb	r3, [r7, #22]
 8000c16:	fa42 f303 	asr.w	r3, r2, r3
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d005      	beq.n	8000c2e <lcd_ShowChar+0x152>
 8000c22:	883a      	ldrh	r2, [r7, #0]
 8000c24:	88b9      	ldrh	r1, [r7, #4]
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff3f 	bl	8000aac <lcd_DrawPoint>
				x++;
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	3301      	adds	r3, #1
 8000c32:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000c34:	88fa      	ldrh	r2, [r7, #6]
 8000c36:	8a3b      	ldrh	r3, [r7, #16]
 8000c38:	1ad2      	subs	r2, r2, r3
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d105      	bne.n	8000c4c <lcd_ShowChar+0x170>
				{
					x=x0;
 8000c40:	8a3b      	ldrh	r3, [r7, #16]
 8000c42:	80fb      	strh	r3, [r7, #6]
					y++;
 8000c44:	88bb      	ldrh	r3, [r7, #4]
 8000c46:	3301      	adds	r3, #1
 8000c48:	80bb      	strh	r3, [r7, #4]
					break;
 8000c4a:	e005      	b.n	8000c58 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000c4c:	7dbb      	ldrb	r3, [r7, #22]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	75bb      	strb	r3, [r7, #22]
 8000c52:	7dbb      	ldrb	r3, [r7, #22]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	d9b7      	bls.n	8000bc8 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000c58:	8a7b      	ldrh	r3, [r7, #18]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	827b      	strh	r3, [r7, #18]
 8000c5e:	8a7a      	ldrh	r2, [r7, #18]
 8000c60:	89bb      	ldrh	r3, [r7, #12]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d380      	bcc.n	8000b68 <lcd_ShowChar+0x8c>
 8000c66:	e000      	b.n	8000c6a <lcd_ShowChar+0x18e>
		else return;
 8000c68:	bf00      	nop
				}
			}
		}
	}
}
 8000c6a:	371c      	adds	r7, #28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	08004328 	.word	0x08004328
 8000c74:	08004918 	.word	0x08004918
 8000c78:	08005ae8 	.word	0x08005ae8

08000c7c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000c90:	e004      	b.n	8000c9c <mypow+0x20>
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	fb02 f303 	mul.w	r3, r2, r3
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	1e5a      	subs	r2, r3, #1
 8000ca0:	71ba      	strb	r2, [r7, #6]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f5      	bne.n	8000c92 <mypow+0x16>
	return result;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af04      	add	r7, sp, #16
 8000cba:	4604      	mov	r4, r0
 8000cbc:	4608      	mov	r0, r1
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4623      	mov	r3, r4
 8000cc4:	80fb      	strh	r3, [r7, #6]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	80bb      	strh	r3, [r7, #4]
 8000cca:	460b      	mov	r3, r1
 8000ccc:	807b      	strh	r3, [r7, #2]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cda:	085b      	lsrs	r3, r3, #1
 8000cdc:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
 8000ce2:	e059      	b.n	8000d98 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000ce4:	887c      	ldrh	r4, [r7, #2]
 8000ce6:	787a      	ldrb	r2, [r7, #1]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f7ff ffc1 	bl	8000c7c <mypow>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	fbb4 f1f3 	udiv	r1, r4, r3
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <lcd_ShowIntNum+0xf8>)
 8000d02:	fba3 2301 	umull	r2, r3, r3, r1
 8000d06:	08da      	lsrs	r2, r3, #3
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	1aca      	subs	r2, r1, r3
 8000d12:	4613      	mov	r3, r2
 8000d14:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000d16:	7bbb      	ldrb	r3, [r7, #14]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d121      	bne.n	8000d60 <lcd_ShowIntNum+0xac>
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	787b      	ldrb	r3, [r7, #1]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	429a      	cmp	r2, r3
 8000d24:	da1c      	bge.n	8000d60 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8000d26:	7b3b      	ldrb	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d117      	bne.n	8000d5c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	7b7b      	ldrb	r3, [r7, #13]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	fb12 f303 	smulbb	r3, r2, r3
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	b298      	uxth	r0, r3
 8000d40:	8c3a      	ldrh	r2, [r7, #32]
 8000d42:	88b9      	ldrh	r1, [r7, #4]
 8000d44:	2300      	movs	r3, #0
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d4c:	9301      	str	r3, [sp, #4]
 8000d4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4613      	mov	r3, r2
 8000d54:	2220      	movs	r2, #32
 8000d56:	f7ff fec1 	bl	8000adc <lcd_ShowChar>
				continue;
 8000d5a:	e01a      	b.n	8000d92 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	7b7b      	ldrb	r3, [r7, #13]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	fb12 f303 	smulbb	r3, r2, r3
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	4413      	add	r3, r2
 8000d72:	b298      	uxth	r0, r3
 8000d74:	7b3b      	ldrb	r3, [r7, #12]
 8000d76:	3330      	adds	r3, #48	; 0x30
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	8c3c      	ldrh	r4, [r7, #32]
 8000d7c:	88b9      	ldrh	r1, [r7, #4]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	9302      	str	r3, [sp, #8]
 8000d82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	4623      	mov	r3, r4
 8000d8e:	f7ff fea5 	bl	8000adc <lcd_ShowChar>
	for(t=0;t<len;t++)
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	3301      	adds	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	787b      	ldrb	r3, [r7, #1]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3a1      	bcc.n	8000ce4 <lcd_ShowIntNum+0x30>
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd90      	pop	{r4, r7, pc}
 8000daa:	bf00      	nop
 8000dac:	cccccccd 	.word	0xcccccccd

08000db0 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0303 	and.w	r3, r3, #3
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d007      	beq.n	8000dda <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <lcd_SetDir+0x44>)
 8000dcc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000dd0:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <lcd_SetDir+0x44>)
 8000dd4:	22f0      	movs	r2, #240	; 0xf0
 8000dd6:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8000dd8:	e006      	b.n	8000de8 <lcd_SetDir+0x38>
		lcddev.width=240;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <lcd_SetDir+0x44>)
 8000ddc:	22f0      	movs	r2, #240	; 0xf0
 8000dde:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <lcd_SetDir+0x44>)
 8000de2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000de6:	805a      	strh	r2, [r3, #2]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	200000ac 	.word	0x200000ac

08000df8 <lcd_init>:


void lcd_init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	48aa      	ldr	r0, [pc, #680]	; (80010ac <lcd_init+0x2b4>)
 8000e04:	f001 fa9c 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e0c:	f000 ffc6 	bl	8001d9c <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	48a5      	ldr	r0, [pc, #660]	; (80010ac <lcd_init+0x2b4>)
 8000e18:	f001 fa92 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000e1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e20:	f000 ffbc 	bl	8001d9c <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8000e24:	2000      	movs	r0, #0
 8000e26:	f7ff ffc3 	bl	8000db0 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8000e2a:	20d3      	movs	r0, #211	; 0xd3
 8000e2c:	f7ff fd8e 	bl	800094c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8000e30:	f7ff fdac 	bl	800098c <LCD_RD_DATA>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	4b9d      	ldr	r3, [pc, #628]	; (80010b0 <lcd_init+0x2b8>)
 8000e3a:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e3c:	f7ff fda6 	bl	800098c <LCD_RD_DATA>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b9a      	ldr	r3, [pc, #616]	; (80010b0 <lcd_init+0x2b8>)
 8000e46:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8000e48:	f7ff fda0 	bl	800098c <LCD_RD_DATA>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4b97      	ldr	r3, [pc, #604]	; (80010b0 <lcd_init+0x2b8>)
 8000e52:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8000e54:	4b96      	ldr	r3, [pc, #600]	; (80010b0 <lcd_init+0x2b8>)
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <lcd_init+0x2b8>)
 8000e5e:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8000e60:	f7ff fd94 	bl	800098c <LCD_RD_DATA>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461a      	mov	r2, r3
 8000e68:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <lcd_init+0x2b8>)
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	4b8f      	ldr	r3, [pc, #572]	; (80010b0 <lcd_init+0x2b8>)
 8000e72:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000e74:	20cf      	movs	r0, #207	; 0xcf
 8000e76:	f7ff fd69 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f7ff fd76 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000e80:	20c1      	movs	r0, #193	; 0xc1
 8000e82:	f7ff fd73 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000e86:	2030      	movs	r0, #48	; 0x30
 8000e88:	f7ff fd70 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000e8c:	20ed      	movs	r0, #237	; 0xed
 8000e8e:	f7ff fd5d 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f7ff fd6a 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f7ff fd67 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000e9e:	2012      	movs	r0, #18
 8000ea0:	f7ff fd64 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000ea4:	2081      	movs	r0, #129	; 0x81
 8000ea6:	f7ff fd61 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000eaa:	20e8      	movs	r0, #232	; 0xe8
 8000eac:	f7ff fd4e 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000eb0:	2085      	movs	r0, #133	; 0x85
 8000eb2:	f7ff fd5b 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000eb6:	2010      	movs	r0, #16
 8000eb8:	f7ff fd58 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000ebc:	207a      	movs	r0, #122	; 0x7a
 8000ebe:	f7ff fd55 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000ec2:	20cb      	movs	r0, #203	; 0xcb
 8000ec4:	f7ff fd42 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000ec8:	2039      	movs	r0, #57	; 0x39
 8000eca:	f7ff fd4f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000ece:	202c      	movs	r0, #44	; 0x2c
 8000ed0:	f7ff fd4c 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff fd49 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000eda:	2034      	movs	r0, #52	; 0x34
 8000edc:	f7ff fd46 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000ee0:	2002      	movs	r0, #2
 8000ee2:	f7ff fd43 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000ee6:	20f7      	movs	r0, #247	; 0xf7
 8000ee8:	f7ff fd30 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000eec:	2020      	movs	r0, #32
 8000eee:	f7ff fd3d 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000ef2:	20ea      	movs	r0, #234	; 0xea
 8000ef4:	f7ff fd2a 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fd37 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fd34 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000f04:	20c0      	movs	r0, #192	; 0xc0
 8000f06:	f7ff fd21 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000f0a:	201b      	movs	r0, #27
 8000f0c:	f7ff fd2e 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000f10:	20c1      	movs	r0, #193	; 0xc1
 8000f12:	f7ff fd1b 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff fd28 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000f1c:	20c5      	movs	r0, #197	; 0xc5
 8000f1e:	f7ff fd15 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000f22:	2030      	movs	r0, #48	; 0x30
 8000f24:	f7ff fd22 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000f28:	2030      	movs	r0, #48	; 0x30
 8000f2a:	f7ff fd1f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000f2e:	20c7      	movs	r0, #199	; 0xc7
 8000f30:	f7ff fd0c 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000f34:	20b7      	movs	r0, #183	; 0xb7
 8000f36:	f7ff fd19 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000f3a:	2036      	movs	r0, #54	; 0x36
 8000f3c:	f7ff fd06 	bl	800094c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8000f40:	2008      	movs	r0, #8
 8000f42:	f7ff fd13 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000f46:	203a      	movs	r0, #58	; 0x3a
 8000f48:	f7ff fd00 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000f4c:	2055      	movs	r0, #85	; 0x55
 8000f4e:	f7ff fd0d 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000f52:	20b1      	movs	r0, #177	; 0xb1
 8000f54:	f7ff fcfa 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd07 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000f5e:	201a      	movs	r0, #26
 8000f60:	f7ff fd04 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000f64:	20b6      	movs	r0, #182	; 0xb6
 8000f66:	f7ff fcf1 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f7ff fcfe 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000f70:	20a2      	movs	r0, #162	; 0xa2
 8000f72:	f7ff fcfb 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000f76:	20f2      	movs	r0, #242	; 0xf2
 8000f78:	f7ff fce8 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fcf5 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000f82:	2026      	movs	r0, #38	; 0x26
 8000f84:	f7ff fce2 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000f88:	2001      	movs	r0, #1
 8000f8a:	f7ff fcef 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000f8e:	20e0      	movs	r0, #224	; 0xe0
 8000f90:	f7ff fcdc 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000f94:	200f      	movs	r0, #15
 8000f96:	f7ff fce9 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000f9a:	202a      	movs	r0, #42	; 0x2a
 8000f9c:	f7ff fce6 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000fa0:	2028      	movs	r0, #40	; 0x28
 8000fa2:	f7ff fce3 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fa6:	2008      	movs	r0, #8
 8000fa8:	f7ff fce0 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000fac:	200e      	movs	r0, #14
 8000fae:	f7ff fcdd 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000fb2:	2008      	movs	r0, #8
 8000fb4:	f7ff fcda 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000fb8:	2054      	movs	r0, #84	; 0x54
 8000fba:	f7ff fcd7 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000fbe:	20a9      	movs	r0, #169	; 0xa9
 8000fc0:	f7ff fcd4 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000fc4:	2043      	movs	r0, #67	; 0x43
 8000fc6:	f7ff fcd1 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000fca:	200a      	movs	r0, #10
 8000fcc:	f7ff fcce 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f7ff fccb 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fcc8 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f7ff fcc5 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fcc2 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff fcbf 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000fee:	20e1      	movs	r0, #225	; 0xe1
 8000ff0:	f7ff fcac 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff fcb9 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000ffa:	2015      	movs	r0, #21
 8000ffc:	f7ff fcb6 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001000:	2017      	movs	r0, #23
 8001002:	f7ff fcb3 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001006:	2007      	movs	r0, #7
 8001008:	f7ff fcb0 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800100c:	2011      	movs	r0, #17
 800100e:	f7ff fcad 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001012:	2006      	movs	r0, #6
 8001014:	f7ff fcaa 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001018:	202b      	movs	r0, #43	; 0x2b
 800101a:	f7ff fca7 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800101e:	2056      	movs	r0, #86	; 0x56
 8001020:	f7ff fca4 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001024:	203c      	movs	r0, #60	; 0x3c
 8001026:	f7ff fca1 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 800102a:	2005      	movs	r0, #5
 800102c:	f7ff fc9e 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001030:	2010      	movs	r0, #16
 8001032:	f7ff fc9b 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001036:	200f      	movs	r0, #15
 8001038:	f7ff fc98 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800103c:	203f      	movs	r0, #63	; 0x3f
 800103e:	f7ff fc95 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001042:	203f      	movs	r0, #63	; 0x3f
 8001044:	f7ff fc92 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001048:	200f      	movs	r0, #15
 800104a:	f7ff fc8f 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 800104e:	202b      	movs	r0, #43	; 0x2b
 8001050:	f7ff fc7c 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001054:	2000      	movs	r0, #0
 8001056:	f7ff fc89 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fc86 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001060:	2001      	movs	r0, #1
 8001062:	f7ff fc83 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001066:	203f      	movs	r0, #63	; 0x3f
 8001068:	f7ff fc80 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800106c:	202a      	movs	r0, #42	; 0x2a
 800106e:	f7ff fc6d 	bl	800094c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001072:	2000      	movs	r0, #0
 8001074:	f7ff fc7a 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001078:	2000      	movs	r0, #0
 800107a:	f7ff fc77 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff fc74 	bl	800096c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001084:	20ef      	movs	r0, #239	; 0xef
 8001086:	f7ff fc71 	bl	800096c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800108a:	2011      	movs	r0, #17
 800108c:	f7ff fc5e 	bl	800094c <LCD_WR_REG>
	HAL_Delay(120);
 8001090:	2078      	movs	r0, #120	; 0x78
 8001092:	f000 fe83 	bl	8001d9c <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001096:	2029      	movs	r0, #41	; 0x29
 8001098:	f7ff fc58 	bl	800094c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a2:	4804      	ldr	r0, [pc, #16]	; (80010b4 <lcd_init+0x2bc>)
 80010a4:	f001 f94c 	bl	8002340 <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40020800 	.word	0x40020800
 80010b0:	200000ac 	.word	0x200000ac
 80010b4:	40020000 	.word	0x40020000

080010b8 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4413      	add	r3, r2
 80010d0:	b298      	uxth	r0, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	8b3a      	ldrh	r2, [r7, #24]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f7ff fce3 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	b298      	uxth	r0, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	8b3a      	ldrh	r2, [r7, #24]
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fcd3 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	b29a      	uxth	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4413      	add	r3, r2
 8001110:	b298      	uxth	r0, r3
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	b29a      	uxth	r2, r3
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	b29b      	uxth	r3, r3
 800111e:	8b3a      	ldrh	r2, [r7, #24]
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fcc3 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	b29a      	uxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	b29b      	uxth	r3, r3
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	b298      	uxth	r0, r3
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	b29a      	uxth	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b29b      	uxth	r3, r3
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	8b3a      	ldrh	r2, [r7, #24]
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fcb3 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	b29a      	uxth	r2, r3
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b298      	uxth	r0, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	b29a      	uxth	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	b29b      	uxth	r3, r3
 800115e:	8b3a      	ldrh	r2, [r7, #24]
 8001160:	4619      	mov	r1, r3
 8001162:	f7ff fca3 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	b29a      	uxth	r2, r3
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b29b      	uxth	r3, r3
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	b298      	uxth	r0, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b29b      	uxth	r3, r3
 800117e:	8b3a      	ldrh	r2, [r7, #24]
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc93 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	b29a      	uxth	r2, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	4413      	add	r3, r2
 8001190:	b298      	uxth	r0, r3
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	b29a      	uxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	b29b      	uxth	r3, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	8b3a      	ldrh	r2, [r7, #24]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fc83 	bl	8000aac <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b298      	uxth	r0, r3
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	b29b      	uxth	r3, r3
 80011be:	8b3a      	ldrh	r2, [r7, #24]
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fc73 	bl	8000aac <lcd_DrawPoint>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b08a      	sub	sp, #40	; 0x28
 80011d2:	af02      	add	r7, sp, #8
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	603b      	str	r3, [r7, #0]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	f1c3 0303 	rsb	r3, r3, #3
 80011ee:	613b      	str	r3, [r7, #16]


	if (fill)
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d04f      	beq.n	8001296 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80011f6:	e029      	b.n	800124c <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e00a      	b.n	8001214 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 80011fe:	88fb      	ldrh	r3, [r7, #6]
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	68b9      	ldr	r1, [r7, #8]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f7ff ff55 	bl	80010b8 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697a      	ldr	r2, [r7, #20]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	429a      	cmp	r2, r3
 800121a:	ddf0      	ble.n	80011fe <lcd_DrawCircle+0x30>

			if (d < 0) {
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	da06      	bge.n	8001230 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	009a      	lsls	r2, r3, #2
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4413      	add	r3, r2
 800122a:	3306      	adds	r3, #6
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	e00a      	b.n	8001246 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	009a      	lsls	r2, r3, #2
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4413      	add	r3, r2
 800123c:	330a      	adds	r3, #10
 800123e:	613b      	str	r3, [r7, #16]
				y--;
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	3b01      	subs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	429a      	cmp	r2, r3
 8001252:	ddd1      	ble.n	80011f8 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8001254:	e023      	b.n	800129e <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8001256:	88fb      	ldrh	r3, [r7, #6]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f7ff ff29 	bl	80010b8 <_draw_circle_8>
			if (d < 0) {
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	2b00      	cmp	r3, #0
 800126a:	da06      	bge.n	800127a <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	009a      	lsls	r2, r3, #2
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4413      	add	r3, r2
 8001274:	3306      	adds	r3, #6
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	e00a      	b.n	8001290 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	009a      	lsls	r2, r3, #2
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4413      	add	r3, r2
 8001286:	330a      	adds	r3, #10
 8001288:	613b      	str	r3, [r7, #16]
				y--;
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	3b01      	subs	r3, #1
 800128e:	61bb      	str	r3, [r7, #24]
			x++;
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	3301      	adds	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	429a      	cmp	r2, r3
 800129c:	dddb      	ble.n	8001256 <lcd_DrawCircle+0x88>
}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <led7_init>:
/**
  * @brief  Init led 7 segment
  * @param  None
  * @retval None
  */
void led7_init(){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <led7_init+0x14>)
 80012b2:	f001 f845 	bl	8002340 <HAL_GPIO_WritePin>
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40021800 	.word	0x40021800

080012c0 <led7_Scan>:
  * @brief  Scan led 7 segment
  * @param  None
  * @note  	Call in 1ms interrupt
  * @retval None
  */
void led7_Scan(){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <led7_Scan+0x104>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b3d      	ldr	r3, [pc, #244]	; (80013c4 <led7_Scan+0x104>)
 80012ce:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 80012d0:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <led7_Scan+0x108>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b3d      	ldr	r3, [pc, #244]	; (80013cc <led7_Scan+0x10c>)
 80012d8:	5c9b      	ldrb	r3, [r3, r2]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <led7_Scan+0x104>)
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <led7_Scan+0x104>)
 80012ec:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80012ee:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <led7_Scan+0x108>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d846      	bhi.n	8001384 <led7_Scan+0xc4>
 80012f6:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <led7_Scan+0x3c>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	0800130d 	.word	0x0800130d
 8001300:	0800132b 	.word	0x0800132b
 8001304:	08001349 	.word	0x08001349
 8001308:	08001367 	.word	0x08001367
	case 0:
		spi_buffer |= 0x00b0;
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <led7_Scan+0x104>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001314:	b29a      	uxth	r2, r3
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <led7_Scan+0x104>)
 8001318:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <led7_Scan+0x104>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001322:	b29a      	uxth	r2, r3
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <led7_Scan+0x104>)
 8001326:	801a      	strh	r2, [r3, #0]
		break;
 8001328:	e02d      	b.n	8001386 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <led7_Scan+0x104>)
 800132c:	881b      	ldrh	r3, [r3, #0]
 800132e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <led7_Scan+0x104>)
 8001336:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <led7_Scan+0x104>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	f023 0320 	bic.w	r3, r3, #32
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <led7_Scan+0x104>)
 8001344:	801a      	strh	r2, [r3, #0]
		break;
 8001346:	e01e      	b.n	8001386 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <led7_Scan+0x104>)
 800134a:	881b      	ldrh	r3, [r3, #0]
 800134c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <led7_Scan+0x104>)
 8001354:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <led7_Scan+0x104>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	f023 0310 	bic.w	r3, r3, #16
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <led7_Scan+0x104>)
 8001362:	801a      	strh	r2, [r3, #0]
		break;
 8001364:	e00f      	b.n	8001386 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <led7_Scan+0x104>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800136e:	b29a      	uxth	r2, r3
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <led7_Scan+0x104>)
 8001372:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <led7_Scan+0x104>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <led7_Scan+0x104>)
 8001380:	801a      	strh	r2, [r3, #0]
		break;
 8001382:	e000      	b.n	8001386 <led7_Scan+0xc6>
	default:
		break;
 8001384:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <led7_Scan+0x108>)
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	425a      	negs	r2, r3
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	bf58      	it	pl
 8001398:	4253      	negpl	r3, r2
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <led7_Scan+0x108>)
 800139e:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2140      	movs	r1, #64	; 0x40
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <led7_Scan+0x110>)
 80013a6:	f000 ffcb 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 80013aa:	2301      	movs	r3, #1
 80013ac:	2202      	movs	r2, #2
 80013ae:	4905      	ldr	r1, [pc, #20]	; (80013c4 <led7_Scan+0x104>)
 80013b0:	4808      	ldr	r0, [pc, #32]	; (80013d4 <led7_Scan+0x114>)
 80013b2:	f001 fccc 	bl	8002d4e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2140      	movs	r1, #64	; 0x40
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <led7_Scan+0x110>)
 80013bc:	f000 ffc0 	bl	8002340 <HAL_GPIO_WritePin>
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000004 	.word	0x20000004
 80013c8:	200000b2 	.word	0x200000b2
 80013cc:	20000000 	.word	0x20000000
 80013d0:	40021800 	.word	0x40021800
 80013d4:	200000c8 	.word	0x200000c8

080013d8 <main>:
uint8_t mode = 0;
uint8_t red_seconds = 5;
uint8_t green_seconds = 3;
uint8_t yellow_seconds = 1;
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013dc:	f000 fc6c 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e0:	f000 f82c 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e4:	f7ff f9ba 	bl	800075c <MX_GPIO_Init>
  MX_TIM2_Init();
 80013e8:	f000 fbca 	bl	8001b80 <MX_TIM2_Init>
  MX_SPI1_Init();
 80013ec:	f000 fadc 	bl	80019a8 <MX_SPI1_Init>
  MX_FSMC_Init();
 80013f0:	f7ff f8e4 	bl	80005bc <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80013f4:	f000 f88c 	bl	8001510 <system_init>
  lcd_Clear(WHITE);
 80013f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013fc:	f7ff fb24 	bl	8000a48 <lcd_Clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  while(!flag_timer2);
 8001400:	bf00      	nop
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <main+0x5c>)
 8001404:	881b      	ldrh	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0fb      	beq.n	8001402 <main+0x2a>
	  flag_timer2 = 0;
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <main+0x5c>)
 800140c:	2200      	movs	r2, #0
 800140e:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001410:	f7ff f868 	bl	80004e4 <button_Scan>
	  test_button();
 8001414:	f000 f89c 	bl	8001550 <test_button>
//	  test_LedDebug();
//	  test_LedY0();
//	  test_LedY1();
	  if(mode == 0){
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <main+0x60>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <main+0x4c>

		  test_leftSet();
 8001420:	f000 f8a2 	bl	8001568 <test_leftSet>
//		  test_rightSet();
	  }
	  if(mode == 1){
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <main+0x60>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d1e9      	bne.n	8001400 <main+0x28>
		  mode2();
 800142c:	f000 f9ee 	bl	800180c <mode2>
	  while(!flag_timer2);
 8001430:	e7e6      	b.n	8001400 <main+0x28>
 8001432:	bf00      	nop
 8001434:	200000c0 	.word	0x200000c0
 8001438:	200000b4 	.word	0x200000b4

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	; 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2230      	movs	r2, #48	; 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f002 ff58 	bl	8004300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b28      	ldr	r3, [pc, #160]	; (8001508 <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001468:	4a27      	ldr	r2, [pc, #156]	; (8001508 <SystemClock_Config+0xcc>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	; 0x40
 8001470:	4b25      	ldr	r3, [pc, #148]	; (8001508 <SystemClock_Config+0xcc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a21      	ldr	r2, [pc, #132]	; (800150c <SystemClock_Config+0xd0>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <SystemClock_Config+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a0:	2310      	movs	r3, #16
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014ac:	2308      	movs	r3, #8
 80014ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014b0:	23a8      	movs	r3, #168	; 0xa8
 80014b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014b8:	2304      	movs	r3, #4
 80014ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 ff57 	bl	8002374 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014cc:	f000 fa16 	bl	80018fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d0:	230f      	movs	r3, #15
 80014d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2105      	movs	r1, #5
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 f9b8 	bl	8002864 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014fa:	f000 f9ff 	bl	80018fc <Error_Handler>
  }
}
 80014fe:	bf00      	nop
 8001500:	3750      	adds	r7, #80	; 0x50
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2120      	movs	r1, #32
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <system_init+0x3c>)
 800151a:	f000 ff11 	bl	8002340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2140      	movs	r1, #64	; 0x40
 8001522:	480a      	ldr	r0, [pc, #40]	; (800154c <system_init+0x3c>)
 8001524:	f000 ff0c 	bl	8002340 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001528:	2200      	movs	r2, #0
 800152a:	2110      	movs	r1, #16
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <system_init+0x3c>)
 800152e:	f000 ff07 	bl	8002340 <HAL_GPIO_WritePin>
	  timer_init();
 8001532:	f000 f9e9 	bl	8001908 <timer_init>
	  led7_init();
 8001536:	f7ff feb7 	bl	80012a8 <led7_init>
	  button_init();
 800153a:	f7fe ffc7 	bl	80004cc <button_init>
	  lcd_init();
 800153e:	f7ff fc5b 	bl	8000df8 <lcd_init>
	  setTimer2(50);
 8001542:	2032      	movs	r0, #50	; 0x32
 8001544:	f000 f9ea 	bl	800191c <setTimer2>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000

08001550 <test_button>:
	led7_SetDigit(0, 0, 0);
	led7_SetDigit(5, 1, 0);
	led7_SetDigit(4, 2, 0);
	led7_SetDigit(7, 3, 0);
}
void test_button(){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
//	for(int i = 0; i < 16; i++){
		if(button_count[0] == 1){
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <test_button+0x14>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d101      	bne.n	8001560 <test_button+0x10>
			change_mode();
 800155c:	f000 f8ee 	bl	800173c <change_mode>
//				led7_SetDigit(0, 0, 0);
//				led7_SetDigit(i, 1, 0);
//			}
//		}
	}
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000034 	.word	0x20000034

08001568 <test_leftSet>:
}



void test_leftSet()
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af04      	add	r7, sp, #16

	int total_time_count = red_seconds*20 + green_seconds*20 + yellow_seconds*20;
 800156e:	4b6f      	ldr	r3, [pc, #444]	; (800172c <test_leftSet+0x1c4>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <test_leftSet+0x1c8>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4413      	add	r3, r2
 800157a:	4a6e      	ldr	r2, [pc, #440]	; (8001734 <test_leftSet+0x1cc>)
 800157c:	7812      	ldrb	r2, [r2, #0]
 800157e:	441a      	add	r2, r3
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	60fb      	str	r3, [r7, #12]
	int red_count = red_seconds*20;
 800158a:	4b68      	ldr	r3, [pc, #416]	; (800172c <test_leftSet+0x1c4>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
	int green_count = green_seconds*20;
 800159a:	4b65      	ldr	r3, [pc, #404]	; (8001730 <test_leftSet+0x1c8>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
	lcd_ShowIntNum(160, 2, red_count, 4, BRED, WHITE, 32);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	2320      	movs	r3, #32
 80015b0:	9302      	str	r3, [sp, #8]
 80015b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2304      	movs	r3, #4
 80015c0:	2102      	movs	r1, #2
 80015c2:	20a0      	movs	r0, #160	; 0xa0
 80015c4:	f7ff fb76 	bl	8000cb4 <lcd_ShowIntNum>
	lcd_ShowIntNum(100, 2, total_time_count, 4, BRED, WHITE, 32);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	2320      	movs	r3, #32
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d4:	9301      	str	r3, [sp, #4]
 80015d6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2304      	movs	r3, #4
 80015de:	2102      	movs	r1, #2
 80015e0:	2064      	movs	r0, #100	; 0x64
 80015e2:	f7ff fb67 	bl	8000cb4 <lcd_ShowIntNum>

	count_left = (count_left + 1) % total_time_count;
 80015e6:	4b54      	ldr	r3, [pc, #336]	; (8001738 <test_leftSet+0x1d0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	3301      	adds	r3, #1
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	fb93 f2f2 	sdiv	r2, r3, r2
 80015f2:	68f9      	ldr	r1, [r7, #12]
 80015f4:	fb01 f202 	mul.w	r2, r1, r2
 80015f8:	1a9b      	subs	r3, r3, r2
 80015fa:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <test_leftSet+0x1d0>)
 80015fc:	6013      	str	r3, [r2, #0]
lcd_ShowIntNum(50, 2, count_left, 4, BRED, WHITE, 32);
 80015fe:	4b4e      	ldr	r3, [pc, #312]	; (8001738 <test_leftSet+0x1d0>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29a      	uxth	r2, r3
 8001604:	2320      	movs	r3, #32
 8001606:	9302      	str	r3, [sp, #8]
 8001608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2304      	movs	r3, #4
 8001616:	2102      	movs	r1, #2
 8001618:	2032      	movs	r0, #50	; 0x32
 800161a:	f7ff fb4b 	bl	8000cb4 <lcd_ShowIntNum>
	if(count_left < red_count)
 800161e:	4b46      	ldr	r3, [pc, #280]	; (8001738 <test_leftSet+0x1d0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	429a      	cmp	r2, r3
 8001626:	dd25      	ble.n	8001674 <test_leftSet+0x10c>
	{
		lcd_DrawCircle(60, 200, WHITE, 20, 1);
 8001628:	2301      	movs	r3, #1
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2314      	movs	r3, #20
 800162e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001632:	21c8      	movs	r1, #200	; 0xc8
 8001634:	203c      	movs	r0, #60	; 0x3c
 8001636:	f7ff fdca 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 120, RED, 20, 1);
 800163a:	2301      	movs	r3, #1
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2314      	movs	r3, #20
 8001640:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001644:	2178      	movs	r1, #120	; 0x78
 8001646:	203c      	movs	r0, #60	; 0x3c
 8001648:	f7ff fdc1 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 200, YELLOW, 20, 0);
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2314      	movs	r3, #20
 8001652:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001656:	21c8      	movs	r1, #200	; 0xc8
 8001658:	203c      	movs	r0, #60	; 0x3c
 800165a:	f7ff fdb8 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 280, GREEN, 20, 0);
 800165e:	2300      	movs	r3, #0
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	2314      	movs	r3, #20
 8001664:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001668:	f44f 718c 	mov.w	r1, #280	; 0x118
 800166c:	203c      	movs	r0, #60	; 0x3c
 800166e:	f7ff fdae 	bl	80011ce <lcd_DrawCircle>
		return;
 8001672:	e057      	b.n	8001724 <test_leftSet+0x1bc>
	}
	if(count_left >= red_count && count_left < (red_count + green_count)){
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <test_leftSet+0x1d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	dc2c      	bgt.n	80016d8 <test_leftSet+0x170>
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	441a      	add	r2, r3
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <test_leftSet+0x1d0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	429a      	cmp	r2, r3
 800168a:	dd25      	ble.n	80016d8 <test_leftSet+0x170>
		lcd_DrawCircle(60, 120, WHITE, 20, 1);
 800168c:	2301      	movs	r3, #1
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2314      	movs	r3, #20
 8001692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001696:	2178      	movs	r1, #120	; 0x78
 8001698:	203c      	movs	r0, #60	; 0x3c
 800169a:	f7ff fd98 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 120, RED, 20, 0);
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2314      	movs	r3, #20
 80016a4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80016a8:	2178      	movs	r1, #120	; 0x78
 80016aa:	203c      	movs	r0, #60	; 0x3c
 80016ac:	f7ff fd8f 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 200, YELLOW, 20, 0);
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2314      	movs	r3, #20
 80016b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016ba:	21c8      	movs	r1, #200	; 0xc8
 80016bc:	203c      	movs	r0, #60	; 0x3c
 80016be:	f7ff fd86 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 280, GREEN, 20, 1);
 80016c2:	2301      	movs	r3, #1
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2314      	movs	r3, #20
 80016c8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80016cc:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016d0:	203c      	movs	r0, #60	; 0x3c
 80016d2:	f7ff fd7c 	bl	80011ce <lcd_DrawCircle>
		return;
 80016d6:	e025      	b.n	8001724 <test_leftSet+0x1bc>
	}
	lcd_DrawCircle(60, 280, WHITE, 20, 1);
 80016d8:	2301      	movs	r3, #1
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2314      	movs	r3, #20
 80016de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e2:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016e6:	203c      	movs	r0, #60	; 0x3c
 80016e8:	f7ff fd71 	bl	80011ce <lcd_DrawCircle>
	lcd_DrawCircle(60, 120, RED, 20, 0);
 80016ec:	2300      	movs	r3, #0
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2314      	movs	r3, #20
 80016f2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80016f6:	2178      	movs	r1, #120	; 0x78
 80016f8:	203c      	movs	r0, #60	; 0x3c
 80016fa:	f7ff fd68 	bl	80011ce <lcd_DrawCircle>
	lcd_DrawCircle(60, 200, YELLOW, 20, 1);
 80016fe:	2301      	movs	r3, #1
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2314      	movs	r3, #20
 8001704:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001708:	21c8      	movs	r1, #200	; 0xc8
 800170a:	203c      	movs	r0, #60	; 0x3c
 800170c:	f7ff fd5f 	bl	80011ce <lcd_DrawCircle>
	lcd_DrawCircle(60, 280, GREEN, 20, 0);
 8001710:	2300      	movs	r3, #0
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	2314      	movs	r3, #20
 8001716:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800171a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800171e:	203c      	movs	r0, #60	; 0x3c
 8001720:	f7ff fd55 	bl	80011ce <lcd_DrawCircle>
}
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000006 	.word	0x20000006
 8001730:	20000007 	.word	0x20000007
 8001734:	20000008 	.word	0x20000008
 8001738:	200000b8 	.word	0x200000b8

0800173c <change_mode>:
		lcd_DrawCircle(160, 120, RED, 20, 1);
		lcd_DrawCircle(160, 200, YELLOW, 20, 0);
		lcd_DrawCircle(160, 280, GREEN, 20, 0);
}

void change_mode(){
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
	mode = (mode + 1)%4;
 8001742:	4b2d      	ldr	r3, [pc, #180]	; (80017f8 <change_mode+0xbc>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	425a      	negs	r2, r3
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	f002 0203 	and.w	r2, r2, #3
 8001752:	bf58      	it	pl
 8001754:	4253      	negpl	r3, r2
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <change_mode+0xbc>)
 800175a:	701a      	strb	r2, [r3, #0]
	if(mode == 0){
 800175c:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <change_mode+0xbc>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d105      	bne.n	8001770 <change_mode+0x34>
			count_left = 0;
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <change_mode+0xc0>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
			count_right = 0;
 800176a:	4b25      	ldr	r3, [pc, #148]	; (8001800 <change_mode+0xc4>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
		}
	if(mode == 1){
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <change_mode+0xbc>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d13b      	bne.n	80017f0 <change_mode+0xb4>
		lcd_DrawCircle(60, 200, WHITE, 20, 1);
 8001778:	2301      	movs	r3, #1
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2314      	movs	r3, #20
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	21c8      	movs	r1, #200	; 0xc8
 8001784:	203c      	movs	r0, #60	; 0x3c
 8001786:	f7ff fd22 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 120, WHITE, 20, 1);
 800178a:	2301      	movs	r3, #1
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2314      	movs	r3, #20
 8001790:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001794:	2178      	movs	r1, #120	; 0x78
 8001796:	203c      	movs	r0, #60	; 0x3c
 8001798:	f7ff fd19 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 280, WHITE, 20, 1);
 800179c:	2301      	movs	r3, #1
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2314      	movs	r3, #20
 80017a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a6:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017aa:	203c      	movs	r0, #60	; 0x3c
 80017ac:	f7ff fd0f 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(160, 120, WHITE, 20, 1);
 80017b0:	2301      	movs	r3, #1
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2314      	movs	r3, #20
 80017b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ba:	2178      	movs	r1, #120	; 0x78
 80017bc:	20a0      	movs	r0, #160	; 0xa0
 80017be:	f7ff fd06 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(160, 200, WHITE, 20, 1);
 80017c2:	2301      	movs	r3, #1
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2314      	movs	r3, #20
 80017c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017cc:	21c8      	movs	r1, #200	; 0xc8
 80017ce:	20a0      	movs	r0, #160	; 0xa0
 80017d0:	f7ff fcfd 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(160, 280, WHITE, 20, 0);
 80017d4:	2300      	movs	r3, #0
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2314      	movs	r3, #20
 80017da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017de:	f44f 718c 	mov.w	r1, #280	; 0x118
 80017e2:	20a0      	movs	r0, #160	; 0xa0
 80017e4:	f7ff fcf3 	bl	80011ce <lcd_DrawCircle>
		editing_red_seconds = red_seconds;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <change_mode+0xc8>)
 80017ea:	781a      	ldrb	r2, [r3, #0]
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <change_mode+0xcc>)
 80017ee:	701a      	strb	r2, [r3, #0]
	}
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200000b4 	.word	0x200000b4
 80017fc:	200000b8 	.word	0x200000b8
 8001800:	200000bc 	.word	0x200000bc
 8001804:	20000006 	.word	0x20000006
 8001808:	200000be 	.word	0x200000be

0800180c <mode2>:


void mode2(){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af04      	add	r7, sp, #16
	count_red_editing = (count_red_editing+1)%10;
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <mode2+0xdc>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4b34      	ldr	r3, [pc, #208]	; (80018ec <mode2+0xe0>)
 800181a:	fb83 1302 	smull	r1, r3, r3, r2
 800181e:	1099      	asrs	r1, r3, #2
 8001820:	17d3      	asrs	r3, r2, #31
 8001822:	1ac9      	subs	r1, r1, r3
 8001824:	460b      	mov	r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	1ad1      	subs	r1, r2, r3
 800182e:	b2ca      	uxtb	r2, r1
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <mode2+0xdc>)
 8001832:	701a      	strb	r2, [r3, #0]
	if(count_red_editing == 5){
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <mode2+0xdc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b05      	cmp	r3, #5
 800183a:	d111      	bne.n	8001860 <mode2+0x54>
		lcd_DrawCircle(160, 120, RED, 20, 1);
 800183c:	2301      	movs	r3, #1
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2314      	movs	r3, #20
 8001842:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001846:	2178      	movs	r1, #120	; 0x78
 8001848:	20a0      	movs	r0, #160	; 0xa0
 800184a:	f7ff fcc0 	bl	80011ce <lcd_DrawCircle>
		lcd_DrawCircle(60, 120, RED, 20, 1);
 800184e:	2301      	movs	r3, #1
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	2314      	movs	r3, #20
 8001854:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001858:	2178      	movs	r1, #120	; 0x78
 800185a:	203c      	movs	r0, #60	; 0x3c
 800185c:	f7ff fcb7 	bl	80011ce <lcd_DrawCircle>
	}
	if(count_red_editing == 0){
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <mode2+0xdc>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <mode2+0x80>
			lcd_DrawCircle(160, 120, WHITE, 20, 0);
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2314      	movs	r3, #20
 800186e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001872:	2178      	movs	r1, #120	; 0x78
 8001874:	20a0      	movs	r0, #160	; 0xa0
 8001876:	f7ff fcaa 	bl	80011ce <lcd_DrawCircle>
			lcd_DrawCircle(60, 120, WHITE, 20, 0);
 800187a:	2300      	movs	r3, #0
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2314      	movs	r3, #20
 8001880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001884:	2178      	movs	r1, #120	; 0x78
 8001886:	203c      	movs	r0, #60	; 0x3c
 8001888:	f7ff fca1 	bl	80011ce <lcd_DrawCircle>
		}

	if(button_count[1] == 1){
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <mode2+0xe4>)
 800188e:	885b      	ldrh	r3, [r3, #2]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d10d      	bne.n	80018b0 <mode2+0xa4>
		if(editing_red_seconds == 99) editing_red_seconds = 1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <mode2+0xe8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b63      	cmp	r3, #99	; 0x63
 800189a:	d103      	bne.n	80018a4 <mode2+0x98>
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <mode2+0xe8>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	e005      	b.n	80018b0 <mode2+0xa4>
		else editing_red_seconds++;
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <mode2+0xe8>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <mode2+0xe8>)
 80018ae:	701a      	strb	r2, [r3, #0]
	}
	if(button_count[2] == 1){
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <mode2+0xe4>)
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d103      	bne.n	80018c0 <mode2+0xb4>
		red_seconds = editing_red_seconds;
 80018b8:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <mode2+0xe8>)
 80018ba:	781a      	ldrb	r2, [r3, #0]
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <mode2+0xec>)
 80018be:	701a      	strb	r2, [r3, #0]
	}
	lcd_ShowIntNum(0, 2, editing_red_seconds, 2, BRED, WHITE, 32);
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <mode2+0xe8>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	2320      	movs	r3, #32
 80018c8:	9302      	str	r3, [sp, #8]
 80018ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2302      	movs	r3, #2
 80018d8:	2102      	movs	r1, #2
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff f9ea 	bl	8000cb4 <lcd_ShowIntNum>
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000bd 	.word	0x200000bd
 80018ec:	66666667 	.word	0x66666667
 80018f0:	20000034 	.word	0x20000034
 80018f4:	200000be 	.word	0x200000be
 80018f8:	20000006 	.word	0x20000006

080018fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001904:	e7fe      	b.n	8001904 <Error_Handler+0x8>
	...

08001908 <timer_init>:
/**
  * @brief  Init timer interrupt
  * @param  None
  * @retval None
  */
void timer_init(){
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <timer_init+0x10>)
 800190e:	f001 ffd1 	bl	80038b4 <HAL_TIM_Base_Start_IT>
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000120 	.word	0x20000120

0800191c <setTimer2>:
/**
  * @brief  Set duration of software timer interrupt
  * @param  duration Duration of software timer interrupt
  * @retval None
  */
void setTimer2(uint16_t duration){
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <setTimer2+0x2c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <setTimer2+0x2c>)
 800192e:	881a      	ldrh	r2, [r3, #0]
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <setTimer2+0x30>)
 8001932:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <setTimer2+0x34>)
 8001936:	2200      	movs	r2, #0
 8001938:	801a      	strh	r2, [r3, #0]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	200000c4 	.word	0x200000c4
 800194c:	200000c2 	.word	0x200000c2
 8001950:	200000c0 	.word	0x200000c0

08001954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Timer interrupt routine
  * @param  htim TIM Base handle
  * @note	This callback function is called by system
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001964:	d116      	bne.n	8001994 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001978:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d106      	bne.n	8001990 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8001982:	4b07      	ldr	r3, [pc, #28]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001984:	2201      	movs	r2, #1
 8001986:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800198e:	801a      	strh	r2, [r3, #0]
			}
		}
		// 1ms interrupt here
		led7_Scan();
 8001990:	f7ff fc96 	bl	80012c0 <led7_Scan>
	}
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200000c2 	.word	0x200000c2
 80019a0:	200000c0 	.word	0x200000c0
 80019a4:	200000c4 	.word	0x200000c4

080019a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ae:	4a18      	ldr	r2, [pc, #96]	; (8001a10 <MX_SPI1_Init+0x68>)
 80019b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019b2:	4b16      	ldr	r3, [pc, #88]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019da:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019f4:	220a      	movs	r2, #10
 80019f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_SPI1_Init+0x64>)
 80019fa:	f001 f91f 	bl	8002c3c <HAL_SPI_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a04:	f7ff ff7a 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000c8 	.word	0x200000c8
 8001a10:	40013000 	.word	0x40013000

08001a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_SPI_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12b      	bne.n	8001a8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a10      	ldr	r2, [pc, #64]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <HAL_SPI_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a6e:	2338      	movs	r3, #56	; 0x38
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_SPI_MspInit+0x8c>)
 8001a8a:	f000 fabd 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40013000 	.word	0x40013000
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <HAL_MspInit+0x4c>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	607b      	str	r3, [r7, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x4c>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f90c 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <TIM2_IRQHandler+0x10>)
 8001b4e:	f001 ff21 	bl	8003994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000120 	.word	0x20000120

08001b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <SystemInit+0x20>)
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <SystemInit+0x20>)
 8001b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	463b      	mov	r3, r7
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001ba6:	f240 3247 	movw	r2, #839	; 0x347
 8001baa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bb4:	2263      	movs	r2, #99	; 0x63
 8001bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb8:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc4:	4813      	ldr	r0, [pc, #76]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bc6:	f001 fe25 	bl	8003814 <HAL_TIM_Base_Init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bd0:	f7ff fe94 	bl	80018fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bda:	f107 0308 	add.w	r3, r7, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001be2:	f001 ffdf 	bl	8003ba4 <HAL_TIM_ConfigClockSource>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bec:	f7ff fe86 	bl	80018fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_TIM2_Init+0x94>)
 8001bfe:	f002 f9fb 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f7ff fe78 	bl	80018fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000120 	.word	0x20000120

08001c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c28:	d115      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x48>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	201c      	movs	r0, #28
 8001c4c:	f000 f9a5 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c50:	201c      	movs	r0, #28
 8001c52:	f000 f9be 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c8e:	f7ff ff65 	bl	8001b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f002 fb11 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c96:	f7ff fb9f 	bl	80013d8 <main>
  bx  lr    
 8001c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001ca8:	080072c8 	.word	0x080072c8
  ldr r2, =_sbss
 8001cac:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001cb0:	2000016c 	.word	0x2000016c

08001cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 f94f 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff feda 	bl	8001aa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f967 	bl	8001fee <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 f92f 	bl	8001f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000014 	.word	0x20000014
 8001d58:	20000010 	.word	0x20000010

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000014 	.word	0x20000014
 8001d80:	20000168 	.word	0x20000168

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000168 	.word	0x20000168

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000014 	.word	0x20000014

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff8e 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff29 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff3e 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff8e 	bl	8001ed8 <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5d 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff31 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa2 	bl	8001f40 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e16b      	b.n	80022fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 815a 	bne.w	80022f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d005      	beq.n	800205a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	2b02      	cmp	r3, #2
 8002058:	d130      	bne.n	80020bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 0201 	and.w	r2, r3, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d017      	beq.n	80020f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d123      	bne.n	800214c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3208      	adds	r2, #8
 8002146:	69b9      	ldr	r1, [r7, #24]
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80b4 	beq.w	80022f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b60      	ldr	r3, [pc, #384]	; (8002314 <HAL_GPIO_Init+0x30c>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a5f      	ldr	r2, [pc, #380]	; (8002314 <HAL_GPIO_Init+0x30c>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_GPIO_Init+0x30c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021aa:	4a5b      	ldr	r2, [pc, #364]	; (8002318 <HAL_GPIO_Init+0x310>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_GPIO_Init+0x314>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d02b      	beq.n	800222e <HAL_GPIO_Init+0x226>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a51      	ldr	r2, [pc, #324]	; (8002320 <HAL_GPIO_Init+0x318>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d025      	beq.n	800222a <HAL_GPIO_Init+0x222>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_GPIO_Init+0x31c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01f      	beq.n	8002226 <HAL_GPIO_Init+0x21e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_GPIO_Init+0x320>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d019      	beq.n	8002222 <HAL_GPIO_Init+0x21a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4e      	ldr	r2, [pc, #312]	; (800232c <HAL_GPIO_Init+0x324>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d013      	beq.n	800221e <HAL_GPIO_Init+0x216>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4d      	ldr	r2, [pc, #308]	; (8002330 <HAL_GPIO_Init+0x328>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00d      	beq.n	800221a <HAL_GPIO_Init+0x212>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4c      	ldr	r2, [pc, #304]	; (8002334 <HAL_GPIO_Init+0x32c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <HAL_GPIO_Init+0x20e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_GPIO_Init+0x330>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d101      	bne.n	8002212 <HAL_GPIO_Init+0x20a>
 800220e:	2307      	movs	r3, #7
 8002210:	e00e      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002212:	2308      	movs	r3, #8
 8002214:	e00c      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002216:	2306      	movs	r3, #6
 8002218:	e00a      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800221e:	2304      	movs	r3, #4
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x228>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x228>
 800222e:	2300      	movs	r3, #0
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002240:	4935      	ldr	r1, [pc, #212]	; (8002318 <HAL_GPIO_Init+0x310>)
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224e:	4b3b      	ldr	r3, [pc, #236]	; (800233c <HAL_GPIO_Init+0x334>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002272:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_GPIO_Init+0x334>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_GPIO_Init+0x334>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800229c:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_GPIO_Init+0x334>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_GPIO_Init+0x334>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c6:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_GPIO_Init+0x334>)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <HAL_GPIO_Init+0x334>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4013      	ands	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_GPIO_Init+0x334>)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61fb      	str	r3, [r7, #28]
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b0f      	cmp	r3, #15
 8002300:	f67f ae90 	bls.w	8002024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	40023800 	.word	0x40023800
 8002318:	40013800 	.word	0x40013800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40021400 	.word	0x40021400
 8002334:	40021800 	.word	0x40021800
 8002338:	40021c00 	.word	0x40021c00
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e267      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d075      	beq.n	800247e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	2b04      	cmp	r3, #4
 800239c:	d00c      	beq.n	80023b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b85      	ldr	r3, [pc, #532]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d112      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023aa:	4b82      	ldr	r3, [pc, #520]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023b6:	d10b      	bne.n	80023d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	4b7e      	ldr	r3, [pc, #504]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d05b      	beq.n	800247c <HAL_RCC_OscConfig+0x108>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d157      	bne.n	800247c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e242      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d8:	d106      	bne.n	80023e8 <HAL_RCC_OscConfig+0x74>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e01d      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x98>
 80023f2:	4b70      	ldr	r3, [pc, #448]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6f      	ldr	r2, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0xb0>
 800240c:	4b69      	ldr	r3, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a68      	ldr	r2, [pc, #416]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d013      	beq.n	8002454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fcaa 	bl	8001d84 <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002434:	f7ff fca6 	bl	8001d84 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b64      	cmp	r3, #100	; 0x64
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e207      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0xc0>
 8002452:	e014      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff fc96 	bl	8001d84 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800245c:	f7ff fc92 	bl	8001d84 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b64      	cmp	r3, #100	; 0x64
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e1f3      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	4b51      	ldr	r3, [pc, #324]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0xe8>
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d063      	beq.n	8002552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b47      	ldr	r3, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d11c      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024a2:	4b44      	ldr	r3, [pc, #272]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d005      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e1c7      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4937      	ldr	r1, [pc, #220]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	e03a      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d020      	beq.n	8002526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 80024e6:	2201      	movs	r2, #1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ea:	f7ff fc4b 	bl	8001d84 <HAL_GetTick>
 80024ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f0:	e008      	b.n	8002504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f2:	f7ff fc47 	bl	8001d84 <HAL_GetTick>
 80024f6:	4602      	mov	r2, r0
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e1a8      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0f0      	beq.n	80024f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4925      	ldr	r1, [pc, #148]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002526:	4b24      	ldr	r3, [pc, #144]	; (80025b8 <HAL_RCC_OscConfig+0x244>)
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fc2a 	bl	8001d84 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fc26 	bl	8001d84 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e187      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d036      	beq.n	80025cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d016      	beq.n	8002594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002568:	2201      	movs	r2, #1
 800256a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256c:	f7ff fc0a 	bl	8001d84 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002574:	f7ff fc06 	bl	8001d84 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e167      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x240>)
 8002588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x200>
 8002592:	e01b      	b.n	80025cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_OscConfig+0x248>)
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fbf3 	bl	8001d84 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	e00e      	b.n	80025c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a2:	f7ff fbef 	bl	8001d84 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d907      	bls.n	80025c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e150      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80025b4:	40023800 	.word	0x40023800
 80025b8:	42470000 	.word	0x42470000
 80025bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	4b88      	ldr	r3, [pc, #544]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1ea      	bne.n	80025a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8097 	beq.w	8002708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b81      	ldr	r3, [pc, #516]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10f      	bne.n	800260a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a7c      	ldr	r2, [pc, #496]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b77      	ldr	r3, [pc, #476]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b74      	ldr	r3, [pc, #464]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a73      	ldr	r2, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7ff fbaf 	bl	8001d84 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7ff fbab 	bl	8001d84 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e10c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x474>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x2ea>
 8002650:	4b64      	ldr	r3, [pc, #400]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a63      	ldr	r2, [pc, #396]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e01c      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x30c>
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a5b      	ldr	r2, [pc, #364]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0x324>
 8002680:	4b58      	ldr	r3, [pc, #352]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a57      	ldr	r2, [pc, #348]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	4b55      	ldr	r3, [pc, #340]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	4a54      	ldr	r2, [pc, #336]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d015      	beq.n	80026cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7ff fb70 	bl	8001d84 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	e00a      	b.n	80026be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a8:	f7ff fb6c 	bl	8001d84 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e0cb      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	4b49      	ldr	r3, [pc, #292]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ee      	beq.n	80026a8 <HAL_RCC_OscConfig+0x334>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7ff fb5a 	bl	8001d84 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	e00a      	b.n	80026ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d4:	f7ff fb56 	bl	8001d84 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e0b5      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1ee      	bne.n	80026d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f6:	7dfb      	ldrb	r3, [r7, #23]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d105      	bne.n	8002708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fc:	4b39      	ldr	r3, [pc, #228]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	4a38      	ldr	r2, [pc, #224]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002702:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002706:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80a1 	beq.w	8002854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002712:	4b34      	ldr	r3, [pc, #208]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d05c      	beq.n	80027d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d141      	bne.n	80027aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b31      	ldr	r3, [pc, #196]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272c:	f7ff fb2a 	bl	8001d84 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff fb26 	bl	8001d84 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e087      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	019b      	lsls	r3, r3, #6
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	085b      	lsrs	r3, r3, #1
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	491b      	ldr	r1, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 800277e:	2201      	movs	r2, #1
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff faff 	bl	8001d84 <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800278a:	f7ff fafb 	bl	8001d84 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e05c      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x416>
 80027a8:	e054      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fae8 	bl	8001d84 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff fae4 	bl	8001d84 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e045      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x444>
 80027d6:	e03d      	b.n	8002854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e038      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40007000 	.word	0x40007000
 80027ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCC_OscConfig+0x4ec>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d028      	beq.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d121      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	429a      	cmp	r2, r3
 8002818:	d11a      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002828:	4293      	cmp	r3, r2
 800282a:	d111      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0cc      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002878:	4b68      	ldr	r3, [pc, #416]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d90c      	bls.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4b65      	ldr	r3, [pc, #404]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0b8      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d020      	beq.n	80028ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b8:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a58      	ldr	r2, [pc, #352]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d0:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a52      	ldr	r2, [pc, #328]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028dc:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	494d      	ldr	r1, [pc, #308]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d044      	beq.n	8002984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002902:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d119      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e07f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d003      	beq.n	8002922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	2b03      	cmp	r3, #3
 8002920:	d107      	bne.n	8002932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	4b3f      	ldr	r3, [pc, #252]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e06f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002932:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e067      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002942:	4b37      	ldr	r3, [pc, #220]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4934      	ldr	r1, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002954:	f7ff fa16 	bl	8001d84 <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	e00a      	b.n	8002972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800295c:	f7ff fa12 	bl	8001d84 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f241 3288 	movw	r2, #5000	; 0x1388
 800296a:	4293      	cmp	r3, r2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e04f      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	4b2b      	ldr	r3, [pc, #172]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 020c 	and.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	429a      	cmp	r2, r3
 8002982:	d1eb      	bne.n	800295c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002984:	4b25      	ldr	r3, [pc, #148]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d20c      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b20      	ldr	r3, [pc, #128]	; (8002a1c <HAL_RCC_ClockConfig+0x1b8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e032      	b.n	8002a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4916      	ldr	r1, [pc, #88]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d009      	beq.n	80029ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	490e      	ldr	r1, [pc, #56]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ea:	f000 f821 	bl	8002a30 <HAL_RCC_GetSysClockFreq>
 80029ee:	4602      	mov	r2, r0
 80029f0:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	091b      	lsrs	r3, r3, #4
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	490a      	ldr	r1, [pc, #40]	; (8002a24 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	5ccb      	ldrb	r3, [r1, r3]
 80029fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002a02:	4a09      	ldr	r2, [pc, #36]	; (8002a28 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HAL_RCC_ClockConfig+0x1c8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f976 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00
 8002a20:	40023800 	.word	0x40023800
 8002a24:	080072a8 	.word	0x080072a8
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	20000010 	.word	0x20000010

08002a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a34:	b094      	sub	sp, #80	; 0x50
 8002a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a40:	2300      	movs	r3, #0
 8002a42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a48:	4b79      	ldr	r3, [pc, #484]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 030c 	and.w	r3, r3, #12
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d00d      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x40>
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	f200 80e1 	bhi.w	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x34>
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a62:	e0db      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a68:	e0db      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a6a:	4b73      	ldr	r3, [pc, #460]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a6e:	e0d8      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a70:	4b6f      	ldr	r3, [pc, #444]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7a:	4b6d      	ldr	r3, [pc, #436]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d063      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a86:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	099b      	lsrs	r3, r3, #6
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002aa2:	4622      	mov	r2, r4
 8002aa4:	462b      	mov	r3, r5
 8002aa6:	f04f 0000 	mov.w	r0, #0
 8002aaa:	f04f 0100 	mov.w	r1, #0
 8002aae:	0159      	lsls	r1, r3, #5
 8002ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ab4:	0150      	lsls	r0, r2, #5
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4621      	mov	r1, r4
 8002abc:	1a51      	subs	r1, r2, r1
 8002abe:	6139      	str	r1, [r7, #16]
 8002ac0:	4629      	mov	r1, r5
 8002ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad4:	4659      	mov	r1, fp
 8002ad6:	018b      	lsls	r3, r1, #6
 8002ad8:	4651      	mov	r1, sl
 8002ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ade:	4651      	mov	r1, sl
 8002ae0:	018a      	lsls	r2, r1, #6
 8002ae2:	4651      	mov	r1, sl
 8002ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ae8:	4659      	mov	r1, fp
 8002aea:	eb63 0901 	sbc.w	r9, r3, r1
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b02:	4690      	mov	r8, r2
 8002b04:	4699      	mov	r9, r3
 8002b06:	4623      	mov	r3, r4
 8002b08:	eb18 0303 	adds.w	r3, r8, r3
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	462b      	mov	r3, r5
 8002b10:	eb49 0303 	adc.w	r3, r9, r3
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b22:	4629      	mov	r1, r5
 8002b24:	024b      	lsls	r3, r1, #9
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	024a      	lsls	r2, r1, #9
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b36:	2200      	movs	r2, #0
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b40:	f7fd fb42 	bl	80001c8 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b4c:	e058      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	4611      	mov	r1, r2
 8002b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b5e:	623b      	str	r3, [r7, #32]
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
 8002b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b68:	4642      	mov	r2, r8
 8002b6a:	464b      	mov	r3, r9
 8002b6c:	f04f 0000 	mov.w	r0, #0
 8002b70:	f04f 0100 	mov.w	r1, #0
 8002b74:	0159      	lsls	r1, r3, #5
 8002b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b7a:	0150      	lsls	r0, r2, #5
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4641      	mov	r1, r8
 8002b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b86:	4649      	mov	r1, r9
 8002b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	00eb      	lsls	r3, r5, #3
 8002bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bb6:	00e2      	lsls	r2, r4, #3
 8002bb8:	4614      	mov	r4, r2
 8002bba:	461d      	mov	r5, r3
 8002bbc:	4643      	mov	r3, r8
 8002bbe:	18e3      	adds	r3, r4, r3
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	464b      	mov	r3, r9
 8002bc4:	eb45 0303 	adc.w	r3, r5, r3
 8002bc8:	607b      	str	r3, [r7, #4]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	028b      	lsls	r3, r1, #10
 8002bda:	4621      	mov	r1, r4
 8002bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002be0:	4621      	mov	r1, r4
 8002be2:	028a      	lsls	r2, r1, #10
 8002be4:	4610      	mov	r0, r2
 8002be6:	4619      	mov	r1, r3
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	2200      	movs	r2, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	61fa      	str	r2, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	f7fd fae8 	bl	80001c8 <__aeabi_uldivmod>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3750      	adds	r7, #80	; 0x50
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2e:	bf00      	nop
 8002c30:	40023800 	.word	0x40023800
 8002c34:	00f42400 	.word	0x00f42400
 8002c38:	007a1200 	.word	0x007a1200

08002c3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e07b      	b.n	8002d46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c5e:	d009      	beq.n	8002c74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	61da      	str	r2, [r3, #28]
 8002c66:	e005      	b.n	8002c74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fec0 	bl	8001a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002caa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0104 	and.w	r1, r3, #4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	f003 0210 	and.w	r2, r3, #16
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b088      	sub	sp, #32
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <HAL_SPI_Transmit+0x22>
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e126      	b.n	8002fbe <HAL_SPI_Transmit+0x270>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d78:	f7ff f804 	bl	8001d84 <HAL_GetTick>
 8002d7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d002      	beq.n	8002d94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d92:	e10b      	b.n	8002fac <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <HAL_SPI_Transmit+0x52>
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d102      	bne.n	8002da6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002da4:	e102      	b.n	8002fac <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dec:	d10f      	bne.n	8002e0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e18:	2b40      	cmp	r3, #64	; 0x40
 8002e1a:	d007      	beq.n	8002e2c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e34:	d14b      	bne.n	8002ece <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_SPI_Transmit+0xf6>
 8002e3e:	8afb      	ldrh	r3, [r7, #22]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d13e      	bne.n	8002ec2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	881a      	ldrh	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	1c9a      	adds	r2, r3, #2
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e68:	e02b      	b.n	8002ec2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d112      	bne.n	8002e9e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	881a      	ldrh	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	1c9a      	adds	r2, r3, #2
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e9c:	e011      	b.n	8002ec2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9e:	f7fe ff71 	bl	8001d84 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d803      	bhi.n	8002eb6 <HAL_SPI_Transmit+0x168>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x16e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ec0:	e074      	b.n	8002fac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1ce      	bne.n	8002e6a <HAL_SPI_Transmit+0x11c>
 8002ecc:	e04c      	b.n	8002f68 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_SPI_Transmit+0x18e>
 8002ed6:	8afb      	ldrh	r3, [r7, #22]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d140      	bne.n	8002f5e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f02:	e02c      	b.n	8002f5e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d113      	bne.n	8002f3a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f38:	e011      	b.n	8002f5e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3a:	f7fe ff23 	bl	8001d84 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d803      	bhi.n	8002f52 <HAL_SPI_Transmit+0x204>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d102      	bne.n	8002f58 <HAL_SPI_Transmit+0x20a>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f5c:	e026      	b.n	8002fac <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1cd      	bne.n	8002f04 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	6839      	ldr	r1, [r7, #0]
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fbcb 	bl	8003708 <SPI_EndRxTxTransaction>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f86:	2300      	movs	r3, #0
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	77fb      	strb	r3, [r7, #31]
 8002fa8:	e000      	b.n	8002fac <HAL_SPI_Transmit+0x25e>
  }

error:
 8002faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b088      	sub	sp, #32
 8002fca:	af02      	add	r7, sp, #8
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe2:	d112      	bne.n	800300a <HAL_SPI_Receive+0x44>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10e      	bne.n	800300a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ff4:	88fa      	ldrh	r2, [r7, #6]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f8f1 	bl	80031e8 <HAL_SPI_TransmitReceive>
 8003006:	4603      	mov	r3, r0
 8003008:	e0ea      	b.n	80031e0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003010:	2b01      	cmp	r3, #1
 8003012:	d101      	bne.n	8003018 <HAL_SPI_Receive+0x52>
 8003014:	2302      	movs	r3, #2
 8003016:	e0e3      	b.n	80031e0 <HAL_SPI_Receive+0x21a>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003020:	f7fe feb0 	bl	8001d84 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b01      	cmp	r3, #1
 8003030:	d002      	beq.n	8003038 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003032:	2302      	movs	r3, #2
 8003034:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003036:	e0ca      	b.n	80031ce <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <HAL_SPI_Receive+0x7e>
 800303e:	88fb      	ldrh	r3, [r7, #6]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003048:	e0c1      	b.n	80031ce <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2204      	movs	r2, #4
 800304e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	68ba      	ldr	r2, [r7, #8]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	88fa      	ldrh	r2, [r7, #6]
 8003062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	88fa      	ldrh	r2, [r7, #6]
 8003068:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003090:	d10f      	bne.n	80030b2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b40      	cmp	r3, #64	; 0x40
 80030be:	d007      	beq.n	80030d0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d162      	bne.n	800319e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80030d8:	e02e      	b.n	8003138 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d115      	bne.n	8003114 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f103 020c 	add.w	r2, r3, #12
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003112:	e011      	b.n	8003138 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003114:	f7fe fe36 	bl	8001d84 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d803      	bhi.n	800312c <HAL_SPI_Receive+0x166>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d102      	bne.n	8003132 <HAL_SPI_Receive+0x16c>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003136:	e04a      	b.n	80031ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1cb      	bne.n	80030da <HAL_SPI_Receive+0x114>
 8003142:	e031      	b.n	80031a8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d113      	bne.n	800317a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	b292      	uxth	r2, r2
 800315e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	1c9a      	adds	r2, r3, #2
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003178:	e011      	b.n	800319e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800317a:	f7fe fe03 	bl	8001d84 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d803      	bhi.n	8003192 <HAL_SPI_Receive+0x1cc>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d102      	bne.n	8003198 <HAL_SPI_Receive+0x1d2>
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800319c:	e017      	b.n	80031ce <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1cd      	bne.n	8003144 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fa45 	bl	800363c <SPI_EndRxTransaction>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d002      	beq.n	80031cc <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e000      	b.n	80031ce <HAL_SPI_Receive+0x208>
  }

error :
 80031cc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80031de:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08c      	sub	sp, #48	; 0x30
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80031f6:	2301      	movs	r3, #1
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_SPI_TransmitReceive+0x26>
 800320a:	2302      	movs	r3, #2
 800320c:	e18a      	b.n	8003524 <HAL_SPI_TransmitReceive+0x33c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003216:	f7fe fdb5 	bl	8001d84 <HAL_GetTick>
 800321a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003234:	2b01      	cmp	r3, #1
 8003236:	d00f      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x70>
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800323e:	d107      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d103      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x68>
 8003248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324c:	2b04      	cmp	r3, #4
 800324e:	d003      	beq.n	8003258 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003250:	2302      	movs	r3, #2
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003256:	e15b      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_SPI_TransmitReceive+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_TransmitReceive+0x82>
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003270:	e14e      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b04      	cmp	r3, #4
 800327c:	d003      	beq.n	8003286 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2205      	movs	r2, #5
 8003282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	887a      	ldrh	r2, [r7, #2]
 8003296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	887a      	ldrh	r2, [r7, #2]
 800329c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	887a      	ldrh	r2, [r7, #2]
 80032ae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	d007      	beq.n	80032da <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e2:	d178      	bne.n	80033d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_SPI_TransmitReceive+0x10a>
 80032ec:	8b7b      	ldrh	r3, [r7, #26]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d166      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f6:	881a      	ldrh	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	1c9a      	adds	r2, r3, #2
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003316:	e053      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b02      	cmp	r3, #2
 8003324:	d11b      	bne.n	800335e <HAL_SPI_TransmitReceive+0x176>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_SPI_TransmitReceive+0x176>
 8003330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003332:	2b01      	cmp	r3, #1
 8003334:	d113      	bne.n	800335e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	881a      	ldrh	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	1c9a      	adds	r2, r3, #2
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b01      	cmp	r3, #1
 800336a:	d119      	bne.n	80033a0 <HAL_SPI_TransmitReceive+0x1b8>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d014      	beq.n	80033a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003380:	b292      	uxth	r2, r2
 8003382:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	1c9a      	adds	r2, r3, #2
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800339c:	2301      	movs	r3, #1
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80033a0:	f7fe fcf0 	bl	8001d84 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d807      	bhi.n	80033c0 <HAL_SPI_TransmitReceive+0x1d8>
 80033b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d003      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80033be:	e0a7      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1a6      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x130>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1a1      	bne.n	8003318 <HAL_SPI_TransmitReceive+0x130>
 80033d4:	e07c      	b.n	80034d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x1fc>
 80033de:	8b7b      	ldrh	r3, [r7, #26]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d16b      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800340a:	e057      	b.n	80034bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b02      	cmp	r3, #2
 8003418:	d11c      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x26c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d017      	beq.n	8003454 <HAL_SPI_TransmitReceive+0x26c>
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	2b01      	cmp	r3, #1
 8003428:	d114      	bne.n	8003454 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	330c      	adds	r3, #12
 8003434:	7812      	ldrb	r2, [r2, #0]
 8003436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003446:	b29b      	uxth	r3, r3
 8003448:	3b01      	subs	r3, #1
 800344a:	b29a      	uxth	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d119      	bne.n	8003496 <HAL_SPI_TransmitReceive+0x2ae>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68da      	ldr	r2, [r3, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003492:	2301      	movs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003496:	f7fe fc75 	bl	8001d84 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d803      	bhi.n	80034ae <HAL_SPI_TransmitReceive+0x2c6>
 80034a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d102      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x2cc>
 80034ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d103      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034ba:	e029      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1a2      	bne.n	800340c <HAL_SPI_TransmitReceive+0x224>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d19d      	bne.n	800340c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f917 	bl	8003708 <SPI_EndRxTxTransaction>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80034ec:	e010      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10b      	bne.n	800350e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	617b      	str	r3, [r7, #20]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	e000      	b.n	8003510 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800350e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003520:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003524:	4618      	mov	r0, r3
 8003526:	3730      	adds	r7, #48	; 0x30
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	4613      	mov	r3, r2
 800353a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800353c:	f7fe fc22 	bl	8001d84 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	4413      	add	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800354c:	f7fe fc1a 	bl	8001d84 <HAL_GetTick>
 8003550:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003552:	4b39      	ldr	r3, [pc, #228]	; (8003638 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	015b      	lsls	r3, r3, #5
 8003558:	0d1b      	lsrs	r3, r3, #20
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	fb02 f303 	mul.w	r3, r2, r3
 8003560:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003562:	e054      	b.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356a:	d050      	beq.n	800360e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800356c:	f7fe fc0a 	bl	8001d84 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	429a      	cmp	r2, r3
 800357a:	d902      	bls.n	8003582 <SPI_WaitFlagStateUntilTimeout+0x56>
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d13d      	bne.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003590:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800359a:	d111      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035a4:	d004      	beq.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d107      	bne.n	80035c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c8:	d10f      	bne.n	80035ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e017      	b.n	800362e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3b01      	subs	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4013      	ands	r3, r2
 8003618:	68ba      	ldr	r2, [r7, #8]
 800361a:	429a      	cmp	r2, r3
 800361c:	bf0c      	ite	eq
 800361e:	2301      	moveq	r3, #1
 8003620:	2300      	movne	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	429a      	cmp	r2, r3
 800362a:	d19b      	bne.n	8003564 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3720      	adds	r7, #32
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	2000000c 	.word	0x2000000c

0800363c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003650:	d111      	bne.n	8003676 <SPI_EndRxTransaction+0x3a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800365a:	d004      	beq.n	8003666 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d107      	bne.n	8003676 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003674:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800367e:	d12a      	bne.n	80036d6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003688:	d012      	beq.n	80036b0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	2200      	movs	r2, #0
 8003692:	2180      	movs	r1, #128	; 0x80
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff49 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d02d      	beq.n	80036fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e026      	b.n	80036fe <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2101      	movs	r1, #1
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff36 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e013      	b.n	80036fe <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	2101      	movs	r1, #1
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff ff23 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d007      	beq.n	80036fc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e000      	b.n	80036fe <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b088      	sub	sp, #32
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003714:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <SPI_EndRxTxTransaction+0x7c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1b      	ldr	r2, [pc, #108]	; (8003788 <SPI_EndRxTxTransaction+0x80>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0d5b      	lsrs	r3, r3, #21
 8003720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003724:	fb02 f303 	mul.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d112      	bne.n	800375a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2200      	movs	r2, #0
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f7ff fef4 	bl	800352c <SPI_WaitFlagStateUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d016      	beq.n	8003778 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f043 0220 	orr.w	r2, r3, #32
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e00f      	b.n	800377a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3b01      	subs	r3, #1
 8003764:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d0f2      	beq.n	800375a <SPI_EndRxTxTransaction+0x52>
 8003774:	e000      	b.n	8003778 <SPI_EndRxTxTransaction+0x70>
        break;
 8003776:	bf00      	nop
  }

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000000c 	.word	0x2000000c
 8003788:	165e9f81 	.word	0x165e9f81

0800378c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	60b9      	str	r1, [r7, #8]
 8003796:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e034      	b.n	800380c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d106      	bne.n	80037bc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f7fc ffc6 	bl	8000748 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3308      	adds	r3, #8
 80037c4:	4619      	mov	r1, r3
 80037c6:	4610      	mov	r0, r2
 80037c8:	f000 fca6 	bl	8004118 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	461a      	mov	r2, r3
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	f000 fcf0 	bl	80041bc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6858      	ldr	r0, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	f000 fd25 	bl	8004238 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6892      	ldr	r2, [r2, #8]
 80037f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	f041 0101 	orr.w	r1, r1, #1
 8003806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e041      	b.n	80038aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe f9ec 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f000 fa96 	bl	8003d84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e04e      	b.n	800396a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a23      	ldr	r2, [pc, #140]	; (8003978 <HAL_TIM_Base_Start_IT+0xc4>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d022      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f6:	d01d      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_TIM_Base_Start_IT+0xc8>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d018      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_TIM_Base_Start_IT+0xcc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d013      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1c      	ldr	r2, [pc, #112]	; (8003984 <HAL_TIM_Base_Start_IT+0xd0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00e      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_TIM_Base_Start_IT+0xd4>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d009      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a19      	ldr	r2, [pc, #100]	; (800398c <HAL_TIM_Base_Start_IT+0xd8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d004      	beq.n	8003934 <HAL_TIM_Base_Start_IT+0x80>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a18      	ldr	r2, [pc, #96]	; (8003990 <HAL_TIM_Base_Start_IT+0xdc>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d111      	bne.n	8003958 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b06      	cmp	r3, #6
 8003944:	d010      	beq.n	8003968 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003956:	e007      	b.n	8003968 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40010000 	.word	0x40010000
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	40000c00 	.word	0x40000c00
 8003988:	40010400 	.word	0x40010400
 800398c:	40014000 	.word	0x40014000
 8003990:	40001800 	.word	0x40001800

08003994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d122      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d11b      	bne.n	80039f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f06f 0202 	mvn.w	r2, #2
 80039c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f9b5 	bl	8003d46 <HAL_TIM_IC_CaptureCallback>
 80039dc:	e005      	b.n	80039ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f9a7 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f9b8 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0204 	mvn.w	r2, #4
 8003a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f98b 	bl	8003d46 <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f97d 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f98e 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0208 	mvn.w	r2, #8
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f961 	bl	8003d46 <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f953 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f964 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0210 	mvn.w	r2, #16
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f937 	bl	8003d46 <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f929 	bl	8003d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f93a 	bl	8003d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10e      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d107      	bne.n	8003b18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0201 	mvn.w	r2, #1
 8003b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fd ff1e 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d10e      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b30:	2b80      	cmp	r3, #128	; 0x80
 8003b32:	d107      	bne.n	8003b44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fae0 	bl	8004104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4e:	2b40      	cmp	r3, #64	; 0x40
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d107      	bne.n	8003b70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8ff 	bl	8003d6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d10e      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d107      	bne.n	8003b9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f06f 0220 	mvn.w	r2, #32
 8003b94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 faaa 	bl	80040f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e0b4      	b.n	8003d2a <HAL_TIM_ConfigClockSource+0x186>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003be6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bf8:	d03e      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0xd4>
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfe:	f200 8087 	bhi.w	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c06:	f000 8086 	beq.w	8003d16 <HAL_TIM_ConfigClockSource+0x172>
 8003c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c0e:	d87f      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c10:	2b70      	cmp	r3, #112	; 0x70
 8003c12:	d01a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xa6>
 8003c14:	2b70      	cmp	r3, #112	; 0x70
 8003c16:	d87b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c18:	2b60      	cmp	r3, #96	; 0x60
 8003c1a:	d050      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0x11a>
 8003c1c:	2b60      	cmp	r3, #96	; 0x60
 8003c1e:	d877      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c20:	2b50      	cmp	r3, #80	; 0x50
 8003c22:	d03c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xfa>
 8003c24:	2b50      	cmp	r3, #80	; 0x50
 8003c26:	d873      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d058      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0x13a>
 8003c2c:	2b40      	cmp	r3, #64	; 0x40
 8003c2e:	d86f      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c30:	2b30      	cmp	r3, #48	; 0x30
 8003c32:	d064      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c34:	2b30      	cmp	r3, #48	; 0x30
 8003c36:	d86b      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	d060      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c3c:	2b20      	cmp	r3, #32
 8003c3e:	d867      	bhi.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05c      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c44:	2b10      	cmp	r3, #16
 8003c46:	d05a      	beq.n	8003cfe <HAL_TIM_ConfigClockSource+0x15a>
 8003c48:	e062      	b.n	8003d10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6899      	ldr	r1, [r3, #8]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f000 f9ad 	bl	8003fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68ba      	ldr	r2, [r7, #8]
 8003c74:	609a      	str	r2, [r3, #8]
      break;
 8003c76:	e04f      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f000 f996 	bl	8003fb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c9a:	609a      	str	r2, [r3, #8]
      break;
 8003c9c:	e03c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6859      	ldr	r1, [r3, #4]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	461a      	mov	r2, r3
 8003cac:	f000 f90a 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2150      	movs	r1, #80	; 0x50
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f963 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003cbc:	e02c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f000 f929 	bl	8003f22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2160      	movs	r1, #96	; 0x60
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 f953 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003cdc:	e01c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	461a      	mov	r2, r3
 8003cec:	f000 f8ea 	bl	8003ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2140      	movs	r1, #64	; 0x40
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f943 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003cfc:	e00c      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f000 f93a 	bl	8003f82 <TIM_ITRx_SetConfig>
      break;
 8003d0e:	e003      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	73fb      	strb	r3, [r7, #15]
      break;
 8003d14:	e000      	b.n	8003d18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d00f      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a3d      	ldr	r2, [pc, #244]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d00b      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a3c      	ldr	r2, [pc, #240]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d007      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <TIM_Base_SetConfig+0x120>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d003      	beq.n	8003dc4 <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3a      	ldr	r2, [pc, #232]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d108      	bne.n	8003dd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a2f      	ldr	r2, [pc, #188]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d02b      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de4:	d027      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2c      	ldr	r2, [pc, #176]	; (8003e9c <TIM_Base_SetConfig+0x118>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d023      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a2b      	ldr	r2, [pc, #172]	; (8003ea0 <TIM_Base_SetConfig+0x11c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d01f      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <TIM_Base_SetConfig+0x120>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01b      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a29      	ldr	r2, [pc, #164]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d017      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a28      	ldr	r2, [pc, #160]	; (8003eac <TIM_Base_SetConfig+0x128>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a27      	ldr	r2, [pc, #156]	; (8003eb0 <TIM_Base_SetConfig+0x12c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00f      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <TIM_Base_SetConfig+0x130>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a25      	ldr	r2, [pc, #148]	; (8003eb8 <TIM_Base_SetConfig+0x134>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d007      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a24      	ldr	r2, [pc, #144]	; (8003ebc <TIM_Base_SetConfig+0x138>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a23      	ldr	r2, [pc, #140]	; (8003ec0 <TIM_Base_SetConfig+0x13c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <TIM_Base_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_Base_SetConfig+0xf8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a0c      	ldr	r2, [pc, #48]	; (8003ea8 <TIM_Base_SetConfig+0x124>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d103      	bne.n	8003e84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	615a      	str	r2, [r3, #20]
}
 8003e8a:	bf00      	nop
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40010000 	.word	0x40010000
 8003e9c:	40000400 	.word	0x40000400
 8003ea0:	40000800 	.word	0x40000800
 8003ea4:	40000c00 	.word	0x40000c00
 8003ea8:	40010400 	.word	0x40010400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800
 8003eb8:	40001800 	.word	0x40001800
 8003ebc:	40001c00 	.word	0x40001c00
 8003ec0:	40002000 	.word	0x40002000

08003ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	f023 0201 	bic.w	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f023 030a 	bic.w	r3, r3, #10
 8003f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	621a      	str	r2, [r3, #32]
}
 8003f16:	bf00      	nop
 8003f18:	371c      	adds	r7, #28
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b087      	sub	sp, #28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f023 0210 	bic.w	r2, r3, #16
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	031b      	lsls	r3, r3, #12
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	621a      	str	r2, [r3, #32]
}
 8003f76:	bf00      	nop
 8003f78:	371c      	adds	r7, #28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f043 0307 	orr.w	r3, r3, #7
 8003fa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	021a      	lsls	r2, r3, #8
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	371c      	adds	r7, #28
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400c:	2302      	movs	r3, #2
 800400e:	e05a      	b.n	80040c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d01d      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1d      	ldr	r2, [pc, #116]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1a      	ldr	r2, [pc, #104]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a17      	ldr	r2, [pc, #92]	; (80040e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a15      	ldr	r2, [pc, #84]	; (80040ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10c      	bne.n	80040b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40001800 	.word	0x40001800

080040f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004130:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <FSMC_NORSRAM_Init+0xa0>)
 8004136:	4013      	ands	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004142:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004148:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800414e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8004154:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800415a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8004160:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8004166:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800416c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8004172:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8004178:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800417e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8004184:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	2b08      	cmp	r3, #8
 8004192:	d103      	bne.n	800419c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800419a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	fff00080 	.word	0xfff00080

080041bc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80041de:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80041ea:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80041f2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80041fa:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	3b01      	subs	r3, #1
 8004202:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004204:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	3b02      	subs	r3, #2
 800420c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800420e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004214:	4313      	orrs	r3, r2
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004250:	d122      	bne.n	8004298 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004260:	4013      	ands	r3, r2
 8004262:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800426e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004276:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800427e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004284:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6979      	ldr	r1, [r7, #20]
 8004292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004296:	e005      	b.n	80042a4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80042a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	cff00000 	.word	0xcff00000

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	4d0d      	ldr	r5, [pc, #52]	; (80042f0 <__libc_init_array+0x38>)
 80042bc:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042be:	1b64      	subs	r4, r4, r5
 80042c0:	10a4      	asrs	r4, r4, #2
 80042c2:	2600      	movs	r6, #0
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	4d0b      	ldr	r5, [pc, #44]	; (80042f8 <__libc_init_array+0x40>)
 80042ca:	4c0c      	ldr	r4, [pc, #48]	; (80042fc <__libc_init_array+0x44>)
 80042cc:	f000 f820 	bl	8004310 <_init>
 80042d0:	1b64      	subs	r4, r4, r5
 80042d2:	10a4      	asrs	r4, r4, #2
 80042d4:	2600      	movs	r6, #0
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	080072c0 	.word	0x080072c0
 80042f4:	080072c0 	.word	0x080072c0
 80042f8:	080072c0 	.word	0x080072c0
 80042fc:	080072c4 	.word	0x080072c4

08004300 <memset>:
 8004300:	4402      	add	r2, r0
 8004302:	4603      	mov	r3, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <_init>:
 8004310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004312:	bf00      	nop
 8004314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004316:	bc08      	pop	{r3}
 8004318:	469e      	mov	lr, r3
 800431a:	4770      	bx	lr

0800431c <_fini>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr
